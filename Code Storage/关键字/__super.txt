__super就相当于基类的名称，例如：

class b
{
public:
    char f()
    {
        return 'b';
    }
};

class c : public b
{
public:
    char f()
    {
        return 'c';
    }
    char Test()
    {
        return __super::f();
    }
};

构造一个c对象，调用Test函数，返回是'b'。


__super是编译器关键词，是一个辅助工具，在多重继承和多级继承环境下很方便，当你需要调用基类成员时，
不需要你记忆这个成员到底是哪个基类提供的，编译器会帮你找到正确的基类。如果存在二义性（比如有两个基类提供了相同名称的成员），
编译器会报错，在错误信息中会指出有哪些基类具有此成员，此时你可以根据提示信息把__super修改成希望的基类。
总之一句话――它帮你减少记忆负担。