<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0066)http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045.aspx -->
<!DOCTYPE html PUBLIC "" ""><HTML dir="ltr" xmlns="http://www.w3.org/1999/xhtml"><HEAD><META 
content="IE=10.000" http-equiv="X-UA-Compatible">
<LINK href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045.aspx" 
rel="canonical">         
<META http-equiv="Content-Type" content="text/html; charset=utf-8"><TITLE>教程：使用 
C++ 创建你的第一个 Metro 风格应用</TITLE> 
<META name="DCS.dcsuri" content="/zh-cn/library/windows/apps/hh465045(d=default,l=zh-cn,v=win.10).aspx"> 
<META name="NormalizedUrl" content="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045(d=default,l=zh-cn,v=win.10).aspx"> 
<META name="VotingContextUrl" content="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045(d=default,l=zh-cn,v=win.10).aspx"> 
<META name="MN" content="D638F19E-10:56:51 PM"> 
<META name="Search.ShortId" content="hh465045"> 
<META name="Ms.Locale" content="zh-cn">                 <LINK href="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/Combined.css" 
rel="stylesheet" type="text/css" xmlns="http://www.w3.org/1999/xhtml">
<META name="GENERATOR" content="MSHTML 10.00.9200.16384"></HEAD>     
<BODY class="library">
<DIV id="page">
<DIV id="ux-header">
<DIV class="GlobalBar">
<DIV class="PassportScarab"><A class="scarabLink" id="idPPScarab" href="https://login.live.com/login.srf?wa=wsignin1.0&amp;rpsnv=11&amp;ct=1348639012&amp;rver=6.0.5276.0&amp;wp=MCLBI&amp;wlcxt=msdn%24msdn%24msdn&amp;wreply=http%3a%2f%2fmsdn.microsoft.com%2fzh-cn%2flibrary%2fwindows%2fapps%2fhh465045.aspx&amp;lc=2052&amp;id=254354&amp;mkt=zh-CN"><SPAN 
id="idPPScarabSIT">登录  </SPAN></A>         </DIV></DIV>
<DIV class="Clear"></DIV>
<DIV class="Search">
<DIV class="SearchBox">
<FORM id="HeaderSearchForm" onsubmit="return SearchBoxOnSubmit('使用 Bing 搜索 开发中心');" 
action="http://social.msdn.microsoft.com/search/zh-cn/windows/apps" 
method="get"><INPUT name="query" title="使用 Bing 搜索 开发中心" class="TextBoxSearchLoaded" 
id="HeaderSearchTextBox" onfocus="WatermarkFocus(this, '使用 Bing 搜索 开发中心', 'TextBoxSearchLoaded TextBoxSearch')" 
onblur="WatermarkBlur(this, '使用 Bing 搜索 开发中心', 'TextBoxSearchLoaded')" type="text" 
maxlength="100" value="使用 Bing 搜索 开发中心">             <INPUT name="Refinement" 
type="hidden" value="180">             <INPUT title="使用 Bing 搜索 开发中心" class="SearchButton" id="HeaderSearchButton" type="submit"><INPUT id="HeaderSearchButtonHidden" style="display: none;" type="submit"> 
              </FORM></DIV></DIV>
<DIV class="siteLogo"><A title="开发中心 - Windows 应用商店应用" href="http://msdn.microsoft.com/windows/apps">
<DIV title="开发中心 - Windows 应用商店应用" class="sitelogoImage" alt="开发中心 - Windows 应用商店应用"></DIV><SPAN>开发中心 
- Windows 应用商店应用</SPAN>         </A>     </DIV>
<DIV class="tabs"><A title="主页" href="http://msdn.microsoft.com/windows/apps/br229512">主页</A> 
                           <A title="仪表板" href="https://appdev.microsoft.com/StorePortals/zh-cn">仪表板</A> 
                           <A title="文档" href="http://msdn.microsoft.com/library/windows/apps/">文档</A> 
                           <A title="代码库" href="http://code.msdn.microsoft.com/windowsapps">代码库</A> 
                           <A title="下载" href="http://msdn.microsoft.com/windows/apps/br229516">下载</A> 
                           <A title="支持" href="http://msdn.microsoft.com/windows/apps/hh690938">支持</A> 
                           <A title="社区" href="http://msdn.microsoft.com/windows/apps/br229515">社区</A> 
                 </DIV>
<DIV class="masthead_hr"></DIV></DIV>
<DIV class="breadCrumb"><A title="开发中心 - Metro 风格应用程序" href="http://msdn.microsoft.com/zh-cn/windows/apps/">开发中心 
- Metro 风格应用程序</A>            <SPAN>&gt;</SPAN> <A title="文档" href="http://msdn.microsoft.com/zh-cn/library/windows/apps/">文档</A> 
           <SPAN>&gt;</SPAN> <A title="入门" href="http://msdn.microsoft.com/zh-cn/library/windows/apps/br211386.aspx">入门</A> 
           <SPAN>&gt;</SPAN> <A title="选择 C++" href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh974580.aspx">选择 
C++</A>            <SPAN>&gt;</SPAN>         <A title="教程" href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045.aspx">教程</A> 
    </DIV>
<H1 id="TopicTitle">教程：使用 C++ 创建你的第一个 Metro 风格应用</H1>
<DIV id="body">
<DIV id="leftNav">
<DIV id="tocnav">
<DIV class="toclevel0" data-toclevel="0"><A title="Windows Metro 风格应用开发" id="hh703192_Win.10_zh-cn" 
href="http://msdn.microsoft.com/zh-cn/library/windows/apps/br229519.aspx" 
data-tochassubtree="true">Windows Metro 风格应用开发</A></DIV>
<DIV class="toclevel0" data-toclevel="0"><A title="入门" id="hh847909_Win.10_zh-cn" 
href="http://msdn.microsoft.com/zh-cn/library/windows/apps/br211386.aspx" 
data-tochassubtree="true">入门</A></DIV>
<DIV class="toclevel1" data-toclevel="1"><A title="选择 C++" id="hh977067_Win.10_zh-cn" 
href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh974580.aspx" 
data-tochassubtree="true">选择 C++</A></DIV>
<DIV class="toclevel2 current" data-toclevel="2"><A title="教程" href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045.aspx">教程</A></DIV>
<DIV class="toclevel2" data-toclevel="2"><A title="文档路线图" href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh700360.aspx">文档路线图</A></DIV></DIV><A 
id="NavigationResize" 
href="javascript:epx.library.navigationResize.resize()"><IMG title="展开" class="cl_nav_resize_open" 
alt="展开" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/LibrarySprite.png">     
<IMG title="最小化" class="cl_nav_resize_close" alt="最小化" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/LibrarySprite.png"> 
</A> </DIV>
<DIV class="content" id="content">
<DIV class="cl_lw_vs_seperator" id="ratingCounterSeperator" style="display: none;"></DIV>
<DIV id="ratingCounter"><SPAN class="ratingText" id="rcA">16（共 18）对本文的评价是有帮助 
<SPAN id="rateThisPrefix">- </SPAN><A title="评价此主题" id="rateThisTopic" href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045.aspx#feedback">评价此主题</A> 
                    </SPAN>     </DIV>
<DIV class="topic" xmlns="http://www.w3.org/1999/xhtml">
<DIV id="mainSection">
<DIV class="clsServerSDKContent"></DIV>
<P>Windows&nbsp;Metro 风格应用是专为 Windows 8 中引入的用户体验而量身定制的。 每个出色的 Metro 
风格应用都遵循一定的设计原则，从而使其看起来比传统桌面应用更漂亮，响应程度更高并且更加直观。开始创建 Metro 
风格应用之前，建议你先阅读这种新模型的设计理论。你可以在<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465427.aspx">设计 
Metro 风格的应用</A>中找到详细信息。</P>
<P>在此，我们介绍了有助于你使用 C++ 开发 Metro 风格应用的基本代码和概念，此类应用的 UI 使用可扩展应用程序标记语言 (XAML) 
定义。本文章循序渐进指导你完成创建应用的所有步骤。</P>
<P>你也可以从 MSDN 示例网站<A 
href="http://go.microsoft.com/fwlink/p/?LinkId=258676">下载完成后的应用</A>。</P>
<P>如果你希望使用其他编程语言，请参阅：</P>
<UL>
  <LI>
  <P><A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/br211385.aspx">使用 
  JavaScript 创建你的第一个 Metro 风格应用</A> </P></LI>
  <LI>
  <P><A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/br211380.aspx">使用 
  C# 或 Visual Basic 创建你的第一个 Metro 风格应用</A> </P></LI></UL>
<H3><A id="__"></A>目标</H3>
<P>开始编写代码之前，我们先来看一看你在使用 C++ 构建 Metro 风格应用时会用到的一些功能和设计准则。了解 Microsoft Visual 
Studio Express 2012 for Windows 8 如何为设计和开发工作提供支持也很有帮助。了解如何以及何时使用 Visual C++ 组件扩展 
(C++/CX) 来简化面向 Windows 运行时编写代码的工作也十分重要。我们的示例应用是一个博客阅读器，用于下载和显示 RSS 2.0 或 Atom 
1.0 源中的数据。</P>
<P>本文章旨在介绍你在自行创建应用时可以遵循的步骤。完成本课程后，你将能够使用 XAML 和 C++ 构建你自己的 Metro 风格应用。你可以从 MSDN 
示例网站下载完成后的应用。</P>
<H3><A id="C_________Metro_______"></A><A id="c_________metro_______"></A><A id="C_________METRO_______"></A>C++ 
桌面应用与 Metro 风格应用对比</H3>
<P>如果你习惯使用 C++ 编写 Windows 桌面程序，你可能会发现 Metro 
风格应用编程的某些方面与这十分类似，而其他一些方面则需要了解更多知识。</P>
<H4><A id="____"></A>相同之处</H4>
<UL>
  <LI>
  <P>你仍然可以使用 C++ 编写代码，并且你可以访问 STL、CRT 以及任何其他 C++ 库，所不同的是，你不能直接调用某些函数，例如与文件 I/O 
  有关的函数。</P></LI>
  <LI>
  <P>如果你习惯使用可视化设计器，你仍然可以使用这些设计器。如果你习惯手动编写 UI 代码，则可以手动编写 XAML 的代码。</P></LI>
  <LI>
  <P>你仍然可以创建使用 Windows 操作系统类型和你自己的自定义类型的应用。</P></LI>
  <LI>
  <P>你仍然可以使用 Visual Studio 调试器、探查器和其他开发工具。</P></LI>
  <LI>
  <P>你仍然可以创建使用 Visual C++ 编译器编译为原生机器代码的应用。使用 C++ 编写的 Metro 
  风格应用不能在受管运行时环境中执行。</P></LI></UL>
<H4><A id="____"></A>新增内容</H4>
<UL>
  <LI>
  <P>Metro 风格应用的设计准则与桌面应用的设计准则十分不同。设计的重点不再是窗口边框、标签和对话框等。内容才是最重要的。出色的 Metro 
  风格应用从最开始的规划阶段就严格遵循这些准则。</P></LI>
  <LI>
  <P>你将使用 XAML 定义整个 UI。在 Metro 风格应用中，UI 与核心程序逻辑之间的分离比在 Microsoft 基础类 (MFC) 或 
  Microsoft Win32 应用中更为清晰。你在代码文件中处理行为的同时，其他用户可以在 XAML 文件中处理 UI 的外观。</P></LI>
  <LI>
  <P>尽管 Win32 仍然可用于某些功能，但你将主要面向一个易于导航且面向对象的全新 API（即 Windows 运行时）进行编程。</P></LI>
  <LI>
  <P>使用 Windows 运行时对象时，通常你会使用 C++/CX，该语言会提供可用于创建和访问 Windows 
  运行时对象的特殊语法，并在创建和访问过程中支持 C++ 异常处理、委派、事件和动态创建对象的自动引用计数。使用 C++/CX 时，基础 COM 和 
  Windows 体系结构的详细信息几乎从应用代码中完全隐藏。有关详细信息，请参阅 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh699871.aspx">C++/CX 
  语言参考</A>。但是，你还可以使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh438466.aspx">Windows 
  运行时 C++ 模板库</A>直接面向 COM 界面编写程序。</P></LI>
  <LI>
  <P>你的应用可以支持一些新概念（例如，挂起、超级按钮和应用栏），以便为用户提供更有凝聚力的体验。</P></LI>
  <LI>
  <P>你的应用将编译为一个程序包，其中还包含有关你的应用所包含的类型、它使用的资源以及它需要的功能（文件访问、Internet 
  访问和相机访问等）的元数据。</P></LI>
  <LI>
  <P>在 Windows 应用商店中，你的应用通过一个验证流程确定为安全之后，即可面向无数潜在客户发布。</P></LI></UL>
<H3><A id="__________1___"></A>简单博客阅读器，第 1 部分</H3>
<P>我们的示例应用是一个基本的博客阅读器，用于下载和显示 RSS 2.0 或 Atom 1.0 源中的数据。</P>
<P>我们将分为两部分介绍该示例。首先，我们将创建一个基本的、单页版本的博客阅读器，以便于我们重点了解使用 C++ 编写 Metro 
风格应用程序的一些基础知识。 此应用虽然没有真实的 Metro 风格应用中所需的所有功能，但我们可以通过它了解一些基本概念。在第 2 部分中，我们将使用 
Visual Studio Express 2012 for Windows 8 中的一些预定义 XAML 模板创建一个功能更为丰富的多页面应用版本。</P>
<P>我们将从基础的开始：</P>
<UL>
  <LI>
  <P>如何在 Visual Studio Express 2012 for Windows 8 中创建 Metro 风格应用项目。</P></LI>
  <LI>
  <P>如何了解创建的各种项目文件。</P></LI>
  <LI>
  <P>如何了解 Visual C++ 组件扩展以及何时使用它们。</P></LI></UL>
<P>Visual Studio 提供以下内容：源文件管理；综合的构建、部署和启动支持；XAML、Visual 
Basic、C#、C++、图形和清单编辑；调试及其他功能。Visual Studio 有多种版本，在此我们使用的是 Visual Studio Express 
2012 for Windows 8。你可以免费下载 Visual Studio 并且可以获取构建、打包以及部署 Metro 风格应用所需的一切信息。</P>
<P>要开始创建应用，首先创建一个使用 C++ 的 Metro 风格应用项目。 
在此，我们使用最基本的项目模板“空白应用(XAML)”<STRONG></STRONG>。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>创建 Metro 风格应用项目</STRONG></P>
<OL>
  <LI>
  <P>安装 Visual Studio Express 2012 for Windows 8。在系统提示时打开该软件并设置用于 Visual C++ 
  的部署设置。</P></LI>
  <LI>
  <P>在菜单栏上，选择“文件”&gt;“新建项目”<STRONG></STRONG><STRONG></STRONG>。将打开“新建项目”<STRONG></STRONG>对话框。</P></LI>
  <LI>
  <P>在“已安装”窗格中，展开“Visual C++”<STRONG></STRONG><STRONG></STRONG>。</P></LI>
  <LI>
  <P>为 Metro 风格应用项目选择模板。</P></LI>
  <LI>
  <P>在中心窗格中，选择“空白应用(XAML)”<STRONG></STRONG>。</P></LI>
  <LI>
  <P>输入项目的名称。我们将其命名为“SimpleBlogReader”。</P></LI>
  <LI>
  <P>选择“确定”按钮<STRONG></STRONG>。已创建项目文件。</P></LI></OL>
<P>在继续之前，让我们看一下项目文件。 
在<STRONG></STRONG>“解决方案资源管理器”窗格顶部，选择<STRONG></STRONG>“显示所有文件”图标可显示<STRONG></STRONG>“空白应用(XAML)”模板创建的所有项目文件。 
根据你指定的项目名称，你应会看到与此类似的内容。（实际上，Debug 文件夹不会出现，直至通过按 F5 首次构建应用之后。）</P>
<P><IMG title="显示所有文件的解决方案资源管理器" id="xaml_cpp_show_all_files" alt="显示所有文件的解决方案资源管理器" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC600587.png" xmlns=""></P>
<H4><A id="______"></A>你编辑的文件</H4>
<P>让我们先看一下你可以编辑的项目文件。基本上，其中包括直接位于项目文件夹中的任意文件。</P>
<TABLE>
  <TBODY>
  <TR>
    <TH>文件名</TH>
    <TH>说明</TH></TR>
  <TR>
    <TD>
      <P>App.xaml，MainPage.xaml</P></TD>
    <TD>
      <P>代表应用对象和 UI 默认页面的 XAML 标记文件。你可以使用 Visual Studio 设计器、Microsoft Expression 
      Blend 或其他 XAML 设计器工具修改这些文件。大部分修改内容都位于 MainPage.xaml 中。</P></TD></TR>
  <TR>
    <TD>
      <P>App.xaml.h，App.xaml.cpp</P>
      <P>MainPage.xaml.h，MainPage.xaml.cpp</P></TD>
    <TD>
      <P><STRONG>Application</STRONG> 和 <STRONG>MainPage</STRONG> 
      类的用户可编辑标头和实现代码隐藏文件。这些类分别对应于 App.xaml 和 MainPage.xaml 中的 XAML 
      树。MainPage.xaml.h 和 MainPage.xaml.cpp 
      文件是添加与本页相关的事件处理程序和其他自定义程序逻辑的位置。<STRONG>App</STRONG> 
      类中的成员变量的作用域为整个应用。<STRONG>Page</STRONG> 类中的变量的作用域仅为该页面。App.xaml 
      没有可视的设计平面，但你仍可以在设计器中使用文档大纲和属性检查器。</P></TD></TR>
  <TR>
    <TD>
      <P>Package.appxmanifest</P></TD>
    <TD>
      <P>包含描述应用的元数据，例如，显示名称、描述、徽标和功能。单击此项时，它将在“清单设计器”中打开<STRONG></STRONG>。</P></TD></TR>
  <TR>
    <TD>
      <P>*.png</P></TD>
    <TD>
      <P>（位于 Assets 文件夹。）默认徽标和初始屏幕图像，你可以将其替换为自己的图像。</P></TD></TR>
  <TR>
    <TD>
      <P>pch.h，pch.cpp</P></TD>
    <TD>
      <P>典型的 C++ 预编译头文件。可以根据需要向 pch.h 文件中添加 #include 指令。</P></TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<H4><A id="________"></A>你不能修改的文件</H4>
<P>当你从 Visual Studio 中的 *.xaml 页面导航时，XAML 设计器或编辑器将生成这些文件。它们将启用你所编写的用于引用 XAML 
元素的代码隐藏文件。它们还将使代码隐藏文件中的 Microsoft IntelliSense 保持最新。其中一些文件位于 Common 
子文件夹（不在图示中展开）。你可以看一下这些文件以大致了解分部类的工作方式、声明变量的位置，等等。这些文件也可以用于调试。但是不要修改这些文件，因为在下一次构建应用或从 
XAML 页面导航到其他位置时将覆盖你所做的所有更改。</P>
<TABLE>
  <TBODY>
  <TR>
    <TH>文件名</TH>
    <TH>说明</TH></TR>
  <TR>
    <TD>
      <P>App.g.h，App.g.hpp</P></TD>
    <TD>
      <P>App.g.hpp 包含应用的主要方法和一些关联的样本代码。App.g.h 包含的代码可使操作系统在运行时将 .xaml 
      文件加载进内存并创建对象图。不要修改这些文件。</P></TD></TR>
  <TR>
    <TD>
      <P>StandardStyles.xaml</P></TD>
    <TD>
      <P>包含用于定义 Metro 风格应用的外观和感觉的预定义项模板、样式和其他元素。不要修改已具备的样式和模板。但你可以基于它们创建自定义样式（使用 
      <STRONG>BasedOn</STRONG> 
属性），或将它们复制并粘贴到其他页面中，为副本指定一个不同的名称，然后修改副本。</P></TD></TR>
  <TR>
    <TD>
      <P>MainPage.g.h，MainPage.g.hpp</P></TD>
    <TD>
      <P>包含为 <STRONG>MainPage</STRONG> 和 <STRONG>App</STRONG> 
      类自动生成的部分类定义，以及为每个具有 <STRONG>x:Name</STRONG> 属性的 XAML 
      元素生成的成员变量。不要修改这些文件。</P></TD></TR>
  <TR>
    <TD>
      <P>XamlTypeInfo.g.h</P></TD>
    <TD>
      <P>由 XAML 编辑器生成的 C++ 文件，用于启用 Windows 运行时以识别和加载在应用中定义并在任何 XAML 
      文件中引用的任何自定义类型。不要修改此文件。</P></TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<H4><A id="____"></A>代码一览</H4>
<P>在“解决方案资源管理器”中<STRONG></STRONG>，打开 MainPage.xaml 并在 XAML 
编辑器窗格中查看标记。注意，<CODE>&lt;Page&gt;</CODE> 元素包含 <CODE>&lt;Grid&gt;</CODE> 元素。 现在打开 
MainPage.g.h。注意，一个名为 <CODE>MainPage</CODE> 的类是从 
<STRONG>Windows::UI::Xaml::Controls::Page</STRONG> 派生出的，并包含一个 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.grid.aspx">Windows::UI::Xaml::Controls::Grid</A> 
成员变量。</P>
<P>标记中的每个元素类型都有一个相关联的 Windows 运行时类型。在向 XAML 添加元素时，Visual Studio 会生成 C++ 
源代码，使你可以编写将这些元素作为 Windows 运行时类型进行引用的代码隐藏文件。 并非在 C++ 
项目代码中表示所有元素；而是仅表示那些你明确引用的元素。</P>
<P>让我们返回到 MainPage.g.h。 注意，<CODE>MainPage</CODE> 声明为 <CODE>partial ref 
class</CODE>。</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_cf783408-39d9-43da-a867-5f912f0ba8d6');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_cf783408-39d9-43da-a867-5f912f0ba8d6" 
dir="ltr">
<DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">partial</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">class</SPAN> MainPage : <SPAN style="color: blue;">public</SPAN> Windows::UI::Xaml::Controls::Page… {…}

</PRE></DIV></DIV></DIV></DIV>
<P><STRONG>partial</STRONG> 和 <STRONG>ref</STRONG> 关键字显然不是 ISO 标准 C++。它们是专门用于创建 
Windows 运行时类型实例的组件扩展。<STRONG>ref</STRONG> 关键字指示该类是一个 Windows 运行时引用类型；使用 
<STRONG>ref</STRONG> 使你无需编写大量下一代 COM 代码。 在类成员声明中，请注意 
<CODE>Platform::Object^</CODE>。 “^”符号为“尖帽号”，它表示“对象句柄”。在动态内存中创建 Windows 
运行时类型时使用该符号，而不使用“*”。 你也可以使用 C++ <STRONG>auto</STRONG> 关键字；编译器将推断类型。<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh710417.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Platform namespace</STRONG></A> 特定于 C++，它包含 
Windows 运行时类型系统的 C++“投影”必不可少的公用类型和专用类型。</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_a643354e-a519-4b1e-a1e0-eaa889c197ea');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_a643354e-a519-4b1e-a1e0-eaa889c197ea" 
dir="ltr">
<DIV style="color: black;">
<PRE>
Grid^ grid = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Grid(); <SPAN style="color: green;">// or: auto grid = ref new Grid();</SPAN>
grid-&gt;Width = 600;


</PRE></DIV></DIV></DIV></DIV>
<P>从最基本的意义上说，<STRONG>ref</STRONG> 类是一个 COM 对象，它实现了 <STRONG>IInspectable</STRONG> 
接口，其生命期是通过智能指针管理的。 Windows 运行时定义一个语言无关的抽象二进制接口 
(ABI)，它使用机器码本地运行，而不是通过虚拟机运行。C++/CX 可实现面向该 ABI 以一种更类似现代 C++ 的方式编程，而不是类似旧式 COM 
编程。C++/CX 专门用于创建和访问 Windows 运行时类型。 <STRONG>ref</STRONG> 类中不面向 Windows 
运行时的库、模型和函数完全可以使用 ISO 标准 C++ 编写。 在同一函数中混合使用 C++ 和 C++/CX 十分常见。 它们都会编译为本机 C++。有关 
C++/CX 的详细信息，请参阅 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh699871.aspx">Visual 
C++ 语言参考 (C++/CX)</A>。</P>
<P><STRONG>partial</STRONG> 关键字指示编译器在另一个代码文件中继续声明该类。该文件是 MainPage.xaml.h。 
如果程序员必须向 <CODE>MainPage</CODE> 类中添加变量或函数，则可以在 MainPage.xaml.h 和 
MainPage.xaml.cpp 中执行此操作。 如果 XAML 编辑器必须添加变量或其他样本代码，它将在 *.g.h 和 *.g.hpp 
文件中执行此操作。虽然类定义包含两个部分，但在进行编码和编译时，它就像一个类一样。通常，你可以安全地忽略 *.g.* 
文件。这是因为“解决方案资源管理器”默认隐藏这些文件<STRONG></STRONG>。既然我们已了解幕后信息，如果<STRONG></STRONG>“显示所有文件”仍处于启用状态，请选择该图标以将其禁用，以便你可以更轻松地查找要修改的文件。</P>
<H3><A id="______"></A>指定应用功能</H3>
<P>Metro 风格应用在安全容器中运行，该容器对文件系统、网络资源和硬件具有有限的访问权限。当用户从 Windows 应用商店安装应用时，Windows 
会查看 Package.appxmanifest 文件中的元数据，以确定该应用需要哪些功能。例如，某个应用可能需要访问 Internet 
中的数据、用户文档库中的文档，或用户的摄相机和麦克风。当应用安装完成后，它会向用户显示所需的功能，而用户必须授予相应的权限，然后它才能访问这些资源。如果应用没有请求并收到所需资源的权限，则在运行时禁止其访问该资源。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>在应用中添加基本 Internet 功能</STRONG></P>
<OL>
  <LI>
  <P>在“解决方案资源管理器”<STRONG></STRONG>中，打开 
  Package.appxmanifest。随即将在“应用程序清单设计器”<STRONG></STRONG>中打开该文件。</P></LI>
  <LI>
  <P>选择<STRONG></STRONG>“功能”选项卡。</P></LI>
  <LI>
  <P>你会注意到“Internet 
  (客户端)”<STRONG></STRONG>复选框已选中。如果我们需要某些其他功能，就必须在此设计器中手动进行选择。</P></LI>
  <LI>
  <P>关闭清单设计器。</P></LI></OL>
<P>指定某个功能时，它会在 Package.appxmanifest 文件中的 <CODE>Capabilities</CODE> 
元素下列出。通常使用“应用程序清单设计器”来设置功能<STRONG></STRONG>，但如果使用“XML 文本编辑器”<STRONG></STRONG>打开 
Package.appxmanifest.xml，你将可以看到 XML 中的 <CODE>Capabilities</CODE> 元素。</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_2c6e1df3-8bf7-4672-9d4c-b919ec140498');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_2c6e1df3-8bf7-4672-9d4c-b919ec140498" 
dir="ltr">
<DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Capabilities</SPAN><SPAN style="color: blue;">&gt;</SPAN>    
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Capability</SPAN> <SPAN style="color: red;">Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">internetClient</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Capabilities</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV>
<P>有关应用功能的详细信息，请参阅<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/br230259.aspx">清单设计器</A>。</P>
<H3><A id="_______"></A>将数据导入应用</H3>
<P>在此部分中，我们介绍了：</P>
<UL>
  <LI>
  <P>如何创建将用作应用的数据模型的自定义类。</P></LI>
  <LI>
  <P>如何异步检索 RSS 或 Atom 数据源。</P></LI></UL>
<P>现在，我们可以编写代码以将博客源置于应用中。“Developing for Windows”（Windows 开发）博客分别以 RSS 和 Atom 
两种形式显示其文章的全文。我们希望显示每篇最新博客文章的标题、作者、日期和内容。 我们可以使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.web.syndication.syndicationclient.aspx">Windows::Web::Syndication</A> 
命名空间中的类来下载这些源。尽管我们也可以使用这些类显示 UI 中的数据，但我们将创建自己的数据类。这为我们提供了更大的灵活性，使我们可以按相同的方式处理 
RSS 和 Atom 源。我们创建以下三个类：</P>
<UL>
  <LI>
  <P><STRONG>FeedData</STRONG> 包含有关 RSS 或 Atom 源的信息。</P></LI>
  <LI>
  <P><STRONG>FeedItem</STRONG> 包含有关源中的各篇博客文章的信息。</P></LI>
  <LI><STRONG>FeedDataSource</STRONG> 包含下载源和初始化我们的数据类所用的方法。</LI></UL>
<P>我们将这些类定义为公共 ref 类，以启用与显示标题、作者等 XAML 元素的数据绑定。我们使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.data.bindableattribute.bindableattribute.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Bindable</STRONG></A> 特性指定到 XAML 
编译器，此编译器动态绑定到这些类型的实例。在 ref 类中，公共数据成员公开为属性。没有特殊逻辑的属性不需要用户指定的 getter 和 
setter；编译器将提供它们。在 <STRONG>FeedData</STRONG> 类中，注意我们如何使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/br206631.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">IVector</STRONG></A> 将公共集合类型公开给其他 Windows 
运行时类和组件。我们还在内部使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh441570.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Platform::Collections::Vector</STRONG></A> 
类作为实现 <STRONG>IVector</STRONG> 的具体类型。之后，我们将了解如何使用此类型。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>创建自定义数据类</STRONG></P>
<OL>
  <LI>
  <P>在“解决方案资源管理器”<STRONG></STRONG>中，在 <STRONG>SimpleBlogReader</STRONG> 
  项目节点的快捷方式菜单上，选择“添加”<STRONG></STRONG>&gt;“新建项目”<STRONG></STRONG>。</P></LI>
  <LI>
  <P>从选项列表中选择 <STRONG>Header File (.h)</STRONG> 并命名为 
  FeedData.h。（为了方便，我们不在此示例中使用单独的 .cpp 文件。）</P></LI>
  <LI>
  <P>将下列代码复制并粘贴到该文件中。用点时间查看该代码，自行熟悉 C++/CX 构造。请注意“pch.h”的 #include 
  指令，标题是放置你的所有系统标题（如 &lt;string&gt; 和 &lt;vector&gt;）的位置。默认情况下，pch.h 包含 
  &lt;collection.h&gt;，它对于 Platform::Collections::Vector 
  类型是必需的。有关此处你看到内容的详细信息，请参阅<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh699870.aspx">类和结构 
  (C++/CX)</A>。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_ca3c4989-99ee-4c71-afb7-d67ade1841a1');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_ca3c4989-99ee-4c71-afb7-d67ade1841a1" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">namespace</SPAN> SimpleBlogReader
{
    <SPAN style="color: green;">// To be bindable, a class must be defined within a namespace</SPAN>
    <SPAN style="color: green;">// and a bindable attribute needs to be applied.</SPAN>
    <SPAN style="color: green;">// A FeedItem represents a single blog post.</SPAN>
    [Windows::UI::Xaml::Data::Bindable]
    <SPAN style="color: blue;">public</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">class</SPAN> FeedItem <SPAN style="color: blue;">sealed</SPAN>
    {
    <SPAN style="color: blue;">public</SPAN>:
        FeedItem(<SPAN style="color: blue;">void</SPAN>){}

        property Platform::String^ Title;
        property Platform::String^ Author;
        property Platform::String^ Content;      
        property Windows::Foundation::DateTime PubDate;      
        property Windows::Foundation::Uri^ Link;

    <SPAN style="color: blue;">private</SPAN>:
        ~FeedItem(<SPAN style="color: blue;">void</SPAN>){}
    };

    <SPAN style="color: green;">// A FeedData object represents a feed that contains </SPAN>
    <SPAN style="color: green;">// one or more FeedItems. </SPAN>
    [Windows::UI::Xaml::Data::Bindable]
    <SPAN style="color: blue;">public</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">class</SPAN> FeedData <SPAN style="color: blue;">sealed</SPAN>
    {
    <SPAN style="color: blue;">public</SPAN>:
        FeedData(<SPAN style="color: blue;">void</SPAN>)
        {
            m_items = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Platform::Collections::Vector&lt;FeedItem^&gt;();
        }

        <SPAN style="color: green;">// The public members must be Windows Runtime types so that</SPAN>
        <SPAN style="color: green;">// the XAML controls can bind to them from a separate .winmd.</SPAN>
        property Platform::String^ Title;            
        property Windows::Foundation::Collections::IVector&lt;FeedItem^&gt;^ Items
        {
            Windows::Foundation::Collections::IVector&lt;FeedItem^&gt;^ <SPAN style="color: blue;">get</SPAN>() {<SPAN style="color: blue;">return</SPAN> m_items; }
        }

        property Platform::String^ Description;
        property Windows::Foundation::DateTime PubDate;

    <SPAN style="color: blue;">private</SPAN>:
        ~FeedData(<SPAN style="color: blue;">void</SPAN>){}

        Platform::Collections::Vector&lt;FeedItem^&gt;^ m_items;
    };   

}


</PRE></DIV></DIV></DIV></DIV></LI></OL>
<H4><A id="C_______________"></A><A id="c_______________"></A>C++ 
中的异步操作：检索源数据</H4>
<P>我们已具备了数据类，现在即可实现 <STRONG>GetFeedData</STRONG> 函数来下载博客源。 
<STRONG>Windows.Web.Syndication.SyndicationClient</STRONG> 类用于检索和分析 RSS 和 Atom 
源。由于此操作涉及网络 I/O，因此，将异步执行该方法。异步编程模型可在 Windows 运行时类库中找到。异步方法调用会立即向 UI 会话返回控件，从而使 
UI 能够在后台线程上执行操作时保持反应灵敏。</P>
<P>Windows 运行时提供了一种调用异步操作并在操作完成时获取结果的方法；你可以直接面向该 API 编程。但首选方法是使用 ppltasks.h 中定义的 
<A 
href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh750113.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">task class</STRONG></A> 类。该 
<STRONG>task</STRONG> 类使用相同的 Windows 运行时 
API，但你可以使用它来编写更为简明的代码，更便于形成异步操作链并在一个位置处理发生的任何异常。 在使用 <STRONG>task</STRONG> 
类时，基本步骤始终是相同的：</P>
<OL>
  <LI>
  <P>通过调用 Windows 运行时 <STRONG>*Async</STRONG> 方法（如 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.web.syndication.isyndicationclient.retrievefeedasync.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">Windows::Web::Syndication::ISyndicationClient::RetrieveFeedAsync</STRONG></A>）来创建异步操作。</P></LI>
  <LI>
  <P>将操作作为输入参数以创建 <STRONG>task</STRONG> 对象。</P></LI>
  <LI>
  <P>调用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh750044.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">task::then</STRONG></A> 并指定将操作返回值作为输入的 
  lambda。</P></LI>
  <LI>
  <P>可以选择再次调用 <STRONG>then</STRONG> 一次或多次。这些子句可以接受上一子句的返回值。</P></LI>
  <LI>
  <P>可以选择提供 final <STRONG>then</STRONG> 子句，以处理在操作链中的任意位置引发的任何异常。</P></LI></OL>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>添加异步下载功能</STRONG></P>
<OL>
  <LI>将这些行添加到MainPage.xaml.h： 
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_d5a9e2e6-23a4-4fb2-96fc-96dbc7151a09');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_d5a9e2e6-23a4-4fb2-96fc-96dbc7151a09" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
#include <SPAN style="color: rgb(163, 21, 21);">"FeedData.h"</SPAN>
...
<SPAN style="color: green;">// In the MainPage class...</SPAN>
<SPAN style="color: blue;">private</SPAN>:
 <SPAN style="color: blue;">void</SPAN> GetFeedData(Platform::String^ feedUriString);
 FeedData^ feedData;

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>将此行添加到 pch.h，以引入任务和相关对象： 
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_cbf52c2c-4cec-4725-aeec-f9a0aec887a7');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_cbf52c2c-4cec-4725-aeec-f9a0aec887a7" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
#include &lt;ppltasks.h&gt;

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>将这些行添加到MainPage.xaml.cpp： 
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_e3117945-410d-44db-9b11-db93accaa6f4');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_e3117945-410d-44db-9b11-db93accaa6f4" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">using</SPAN> <SPAN style="color: blue;">namespace</SPAN> Windows::Web::Syndication;
<SPAN style="color: blue;">using</SPAN> <SPAN style="color: blue;">namespace</SPAN> concurrency;

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>调用 InitializeComponent 后，将此行添加到 <STRONG>MainPage</STRONG> 构造函数中： 
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_5593a8f3-95b3-4d25-b556-79f84029ab6d');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_5593a8f3-95b3-4d25-b556-79f84029ab6d" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
feedData = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> FeedData();

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>将此方法实现添加到 MainPage.xaml.cpp。有关此代码的详细信息，请参阅<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh780559.aspx">使用 
  C++ 进行异步编程</A>。 
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_f03de769-dbc3-4ef2-97f8-25e38957e317');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_f03de769-dbc3-4ef2-97f8-25e38957e317" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>


 
<SPAN style="color: blue;">void</SPAN> MainPage::GetFeedData(Platform::String^ feedUriString)
{
    <SPAN style="color: green;">// Create the SyndicationClient and the target uri</SPAN>
    SyndicationClient^ client = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> SyndicationClient();
    Uri^ feedUri = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Uri(feedUriString);

    <SPAN style="color: green;">// Create the async operation. feedOp is an </SPAN>
    <SPAN style="color: green;">// IAsyncOperationWithProgress&lt;SyndicationFeed^, RetrievalProgress&gt;^</SPAN>
    auto feedOp = client-&gt;RetrieveFeedAsync(feedUri);
    feedOp = client-&gt;RetrieveFeedAsync(feedUri);

    <SPAN style="color: green;">// Create the task object and pass it the async operation.</SPAN>
    <SPAN style="color: green;">// SyndicationFeed^ is the type of the return value</SPAN>
    <SPAN style="color: green;">// that the feedOp operation will eventually produce.    </SPAN>

    <SPAN style="color: green;">// Create a "continuation" that will run when the first task completes.</SPAN>
    <SPAN style="color: green;">// The continuation takes the return value of the first operation,</SPAN>
    <SPAN style="color: green;">// and then defines its own asynchronous operation by using a lambda.</SPAN>
    create_task(feedOp).then([<SPAN style="color: blue;">this</SPAN>] (SyndicationFeed^ feed) -&gt; SyndicationFeed^
    {
        <SPAN style="color: green;">// Get the title of the feed (not the individual posts).</SPAN>
        feedData-&gt;Title = feed -&gt;Title-&gt;Text;

        <SPAN style="color: green;">// Retrieve the individual posts from the feed.</SPAN>
        auto feedItems = feed-&gt;Items;

        <SPAN style="color: green;">// Iterate over the posts. You could also use</SPAN>
        <SPAN style="color: green;">// std::for_each( begin(feedItems), end(feedItems),</SPAN>
        <SPAN style="color: green;">// [this, feed] (SyndicationItem^ item)</SPAN>
        <SPAN style="color: blue;">for</SPAN>(<SPAN style="color: blue;">int</SPAN> i = 0; i &lt; (<SPAN style="color: blue;">int</SPAN>)feedItems-&gt;Size; i++)
        {         
            auto item = feedItems-&gt;GetAt(i);
            FeedItem^ feedItem = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> FeedItem();
            feedItem-&gt;Title = item-&gt;Title-&gt;Text; 
            feedItem-&gt;PubDate = item-&gt;PublishedDate;

            feedItem-&gt;Author = item-&gt;Authors-&gt;GetAt(0)-&gt;Name; 

            <SPAN style="color: blue;">if</SPAN> (feed-&gt;SourceFormat == SyndicationFormat::Atom10)
            {
                feedItem-&gt;Content = item-&gt;Content-&gt;Text;
            }
            <SPAN style="color: blue;">else</SPAN> <SPAN style="color: blue;">if</SPAN> (feed-&gt;SourceFormat == SyndicationFormat::Rss20)
            {
                feedItem-&gt;Content = item-&gt;Summary-&gt;Text;
            }
            feedData-&gt;Items-&gt;Append(feedItem);
        }

        <SPAN style="color: blue;">this</SPAN>-&gt;DataContext = feedData;
        <SPAN style="color: blue;">return</SPAN> feed;         
    })
    <SPAN style="color: green;">// The last continuation serves as an error handler. The</SPAN>
    <SPAN style="color: green;">// call to get() will surface any exceptions that were raised</SPAN>
    <SPAN style="color: green;">// at any point in the task chain.</SPAN>
    .then( [<SPAN style="color: blue;">this</SPAN>] (concurrency::task&lt;SyndicationFeed^&gt; t)
    {
        <SPAN style="color: blue;">try</SPAN>
        {
            t.<SPAN style="color: blue;">get</SPAN>();
        }
        <SPAN style="color: green;">// SyndicationClient throws E_INVALIDARG </SPAN>
        <SPAN style="color: green;">// if a URL contains illegal characters.</SPAN>
        <SPAN style="color: blue;">catch</SPAN>(Platform::InvalidArgumentException^ e)
        {
            <SPAN style="color: green;">// TODO handle error. For example purposes</SPAN>
            <SPAN style="color: green;">// we just output error to console.</SPAN>
            OutputDebugString(e-&gt;Message-&gt;Data());
        }
    }); 
}


</PRE></DIV></DIV></DIV></DIV>
  <P>请注意，我们在填充完 <CODE>feedData</CODE> 对象后调用了 <CODE>this-&gt;DataContext = 
  feedData</CODE>。我们必须将 <CODE>feedData</CODE> 实例设置为页面的 
  <CODE>DataContext</CODE>，以便能够将我们的 UI 与其绑定在一起。           在将 
  <STRONG>FeedData</STRONG> 作为数据上下文时，我们可以采用 XAML 标记编写 <CODE>{Binding 
  Path="Title"}</CODE>，在启动时加载 XAML 页面并构造对象图形时，加载程序将知道“Title”就是我们的 
  <STRONG>FeedData</STRONG> 实例上的 <STRONG>Title</STRONG> 属性。</P>
  <P>在本演练的第 2 部分中，我们介绍将创建多个 <STRONG>FeedData</STRONG> 对象的、更加复杂的异步操作链。有关 Metro 
  风格应用中 C++ 异步编程的详细信息，请参阅<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh780559.aspx">使用 
  C++ 的异步编程</A>。</P></LI></OL>
<P>在我们的应用启动时，我们希望其自动加载“Developing for Windows”（Windows 
开发）博客。要执行此操作，最佳办法是响应通知页面加载已完成的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.frameworkelement.loaded.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Loaded</STRONG></A> 事件。在方法调用中，我们将传入 Atom 源的 
URL，因为作者数据包含在该源中，而不是包含在 RSS 源中。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>处理 <STRONG>Loaded</STRONG> 事件</STRONG></P>
<OL>
  <LI>
  <P>在 MainPage.xaml 中，将语句 <CODE>Loaded="PageLoadedHandler"</CODE> 添加到起始 
  <CODE>Page</CODE> 标记，它应紧跟在 <CODE>mc:Ignorable="d"</CODE> 
  之后但位于右尖括号之前，从而使整个标记如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_823d862e-4dcf-47b8-92d8-342b2a2e73e7');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_823d862e-4dcf-47b8-92d8-342b2a2e73e7" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Page</SPAN>
    <SPAN style="color: red;">x:Class</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">SimpleBlogReader.MainPage</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">IsTabStop</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">false</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.microsoft.com/winfx/2006/xaml/presentation</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:x</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.microsoft.com/winfx/2006/xaml</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:local</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">using:SimpleBlogReader</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:d</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.microsoft.com/expression/blend/2008</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:mc</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.openxmlformats.org/markup-compatibility/2006</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">mc:Ignorable</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">d</SPAN><SPAN style="color: black;">"</SPAN>    
    <SPAN style="color: red;">Loaded</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">PageLoadedHandler</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>将 C++ 方法签名添加到 MainPage.xaml.h：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_73af9b00-4701-46d1-b260-b61d2a90df43');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_73af9b00-4701-46d1-b260-b61d2a90df43" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: green;">//In the MainPage class declaration...</SPAN>
<SPAN style="color: blue;">private</SPAN>: 
<SPAN style="color: blue;">void</SPAN> PageLoadedHandler(Platform::Object^ sender,
          Windows::UI::Xaml::RoutedEventArgs^ e);

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>在你的文件和 MainPage.xaml.cpp 文件中为事件处理程序方法添加存根实现：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_a27510c2-3a03-4568-aa47-f33946edcac2');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_a27510c2-3a03-4568-aa47-f33946edcac2" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">void</SPAN> MainPage::PageLoadedHandler(Platform::Object^ sender,
          Windows::UI::Xaml::RoutedEventArgs^ e)
{
   GetFeedData(<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows/b/developers/atom.aspx"</SPAN>);
}


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>现在按 <STRONG>Ctrl + Shift + B</STRONG> 可构建应用程序。该过程应构建且没有任何错误或警告。</LI></OL>
<H3><A id="__XAML_____UI"></A><A id="__xaml_____ui"></A>在 XAML 中定义 UI</H3>
<P>现在，让我们看一下如何：</P>
<UL>
  <LI>
  <P>直接在 XAML 中定义布局，而不使用设计器工具。</P></LI>
  <LI>
  <P>在 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.grid.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">Grid</STRONG></A> 中定义行和列。</P></LI>
  <LI>
  <P>为 XAML 元素创建成员变量。</P></LI></UL>
<P>创建 XAML&nbsp;UI 的最简便和最强大的方式是使用 Visual Studio 所提供的模板之一，然后使用 Expression Blend 或 
Visual Studio XAML 设计器等工具来进行自定义。但是，由于我们重点关注 XAML 自身的结构，因此我们将直接在 XAML 代码编辑器中操作。有关 
XAML 的更多背景，请参阅<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh700352.aspx">用于 
Metro 风格应用的 C#、VB 以及 C++ 编程概念</A>。</P>
<P>通常 Metro 
风格应用都包含多个页面，且每个页面都具有不同的布局。例如，博客阅读器可能具有一个用于浏览多篇博客文章并选择其中一篇的页面，以及另一个用于阅读选定文章的页面。每个页面在其自己的代码文件中都是单独的 
XAML 树。页面的典型根元素（至少从逻辑上讲）是 <CODE>&lt;Page&gt;</CODE>。它的相应 Windows 运行时类型为 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh920268.aspx">Windows::UI::Xaml::Controls::Page</A>。<STRONG>Page</STRONG> 
元素/类支持在应用中的页面之间进行基本导航。<STRONG>Page</STRONG> 
将一个布局控件（或面板）作为其直接子元素。在布局控件内部，你可以放置内容控件（如 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.textblock.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">TextBlock</STRONG></A> 和 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.listview.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">ListView</STRONG></A>）来存放图片、文本等各个项。</P>
<P>XAML 布局系统支持绝对布局和动态布局。在绝对布局中，将使用明确的 x-y 
坐标来定位控件；在动态布局中，你可以使布局容器和控件的大小和位置随应用大小的改变而自动改变。可以使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.canvas.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Canvas</STRONG></A> 布局控件进行绝对定位，以及使用 <A 
href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.grid.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Grid</STRONG></A>、<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.stackpanel.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">StackPanel</STRONG></A> 
和其他控件进行动态定位。实际上，你在定义应用的布局时，通常会结合使用绝对方法和动态方法，还可以将面板相互嵌套。</P>
<P>博客阅读器应用的典型布局是：顶部为标题，左侧是文章列表，右侧是选定文章的内容。下图说明了我们的布局的显示效果：</P>
<P><IMG title="简单博客阅读器的布局草图" id="xaml_cpp_layout_sketch" alt="简单博客阅读器的布局草图" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC554201.png" 
xmlns=""></P>
<P>在我们创建项目时，系统为我们创建了一个名为 MainPage.xaml 的文件。该文件具有一个 <STRONG>Page</STRONG> 
元素，该元素将一个 <STRONG>Grid</STRONG> 元素作为子元素。XAML 应如下所示：</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_4f9bdf39-231f-4fc4-97be-7bb6707333a4');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_4f9bdf39-231f-4fc4-97be-7bb6707333a4" 
dir="ltr">
<DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Page</SPAN>
    <SPAN style="color: red;">x:Class</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">SimpleBlogReader.MainPage</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">IsTabStop</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">false</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.microsoft.com/winfx/2006/xaml/presentation</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:x</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.microsoft.com/winfx/2006/xaml</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:local</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">using:SimpleBlogReader</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:d</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.microsoft.com/expression/blend/2008</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:mc</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.openxmlformats.org/markup-compatibility/2006</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">mc:Ignorable</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">d</SPAN><SPAN style="color: black;">"</SPAN> 
    <SPAN style="color: red;">Loaded</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">PageLoadedHandler</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>

    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Background</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource ApplicationPageBackgroundThemeBrush}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN><SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Page</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV>
<P><STRONG>x:Class</STRONG> 属性将此 <STRONG>Page</STRONG> 元素与 
<STRONG>MainPage</STRONG> 类关联起来，该类在 MainPage.g.h 和 MainPage.xaml.h 
中进行声明。请记住我们添加了 <STRONG>feedData</STRONG> 成员变量。在 XAML 树中，<STRONG>xmlns</STRONG> 
属性是 XML 命名空间；此处唯一需要关注的是 <STRONG>xmlns:local</STRONG> 命名空间，它将 
<STRONG>FeedData</STRONG> 和 <STRONG>FeedItem</STRONG> 类纳入 XAML 
页面的范围中，从而使我们可以在稍后将数据绑定到这些类。</P>
<P>我们的布局由三个嵌套的网格元素组成。顶级网格 <STRONG>Grid1</STRONG> 具有两行。首行显示源标题。第二行嵌入 
<STRONG>Grid2</STRONG>，它包含两列。左列包含 <STRONG>ListView</STRONG> 
控件，用于显示所有可用文章的标题、作者和日期。右列包含 <STRONG>Grid3</STRONG>，它包含两行。顶行包含 
<STRONG>TextBlock</STRONG>，第二行包含 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.webview.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">WebView</STRONG></A>。<STRONG>TextBlock</STRONG> 
将显示博客文章的标题，<STRONG>WebView</STRONG> 将显示内容。</P>
<P>下面是简化的视图，其中显示了以前图片中的布局的基本结构。（不要粘贴此代码，因为它还没有完成。）</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_f0bceea2-ee2b-4af2-8342-b92b897662a7');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_f0bceea2-ee2b-4af2-8342-b92b897662a7" 
dir="ltr">
<DIV style="color: black;">
<PRE>

<SPAN style="color: green;">&lt;!-- Pseudo-XAML Simplified View --&gt;</SPAN>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Page</SPAN><SPAN style="color: blue;">&gt;</SPAN>
   ...
   <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Grid1</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
      &lt;Grid.RowDefinitions...
   ...
      <SPAN style="color: green;">&lt;!--In first row of Grid1.--&gt;</SPAN>
      &lt;TextBlock Grid.Row=”0”&gt;…<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN><SPAN style="color: blue;">&gt;</SPAN>
     ...
      <SPAN style="color: green;">&lt;!--In second row of Grid1.--&gt;</SPAN>
      &lt;Grid Name="Grid2" Grid.Row=”1”&gt;
      &lt;Grid.ColumnDefinitions...
         <SPAN style="color: green;">&lt;!-- In left column of Grid2. --&gt;</SPAN>
         &lt;ListView  Grid.Column=”0”&gt;…<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN><SPAN style="color: blue;">&gt;</SPAN>

         <SPAN style="color: green;">&lt;!-- In right column of Grid2. --&gt;</SPAN>
         &lt;Grid Name="Grid3" Grid.Column=”1”&gt;
            &lt;Grid.RowDefinitions...
            &lt;TextBlock Grid.Row=”0”&gt;<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            &lt;WebView  Grid.Row=”1”/&gt; 
         <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN> 
      <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Page</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV>
<P>现在，我们通过一次粘贴一部分代码来创建实际的 XAML。此练习可帮助我们了解如何构造 XAML 用户界面。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>为我们的博客阅读器创建基本布局</STRONG></P>
<OL>
  <LI>在 MainPage.xmal 中，为默认 <CODE>Grid</CODE> 元素添加一个 <CODE>Name</CODE> 
  特性，使整个元素如下所示： 
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_f60e4d2c-b9ec-4c84-b610-e8e3a7bb3697');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_f60e4d2c-b9ec-4c84-b610-e8e3a7bb3697" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Background</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource ApplicationPageBackgroundThemeBrush}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Grid1</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>在 MainPage.xaml 中，为 <STRONG>Grid1</STRONG> 元素定义两行，方法是使用以下 XAML 片段作为 
  <STRONG>Grid</STRONG> 的第一个子节点，紧跟在起始标记之后。第一个行定义（第 0 行）中的 
  <CODE>Height="140"</CODE> 属性设置将顶行设置为 140 
  像素的绝对高度。无论行内容或应用的大小如何变化，此高度都不会改变。第二个行定义（第 1 行）中的 <CODE>Height="*"</CODE> 
  设置指示底部行占据第 0 行确定大小后剩余的任意大小的空间。这称为比例缩放。</P>
  <P class="note"><STRONG>注意</STRONG>&nbsp;&nbsp;只要你键入或粘贴代码，Visual Studio 
  应自动提供正确的缩进。如果不是，则单击“编辑”<STRONG>&gt;“高级”&gt;“设置文档格式”</STRONG>。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_2c8f1f16-533c-403f-8869-409a8caf590e');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_2c8f1f16-533c-403f-8869-409a8caf590e" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
   <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">140</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
   <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">*</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>紧跟在行定义后，但仍在 <STRONG>Grid1</STRONG> 内，向第一行中添加以下 <STRONG>TextBlock</STRONG> 
  内容控件。这将保留源的主标题，因此，我们可以为其指定较大的字体。 我们为其提供一个 <STRONG>x:Name</STRONG> 属性，以便我们可以在 
  C++ 代码中引用该属性，并且还会提供一个在将数据绑定到该属性后显示的临时字符串。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_67ef2869-f22c-4da1-be82-8e9214f281c8');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_67ef2869-f22c-4da1-be82-8e9214f281c8" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">TitleText</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Main Title of Blog Feed</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">VerticalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Center</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">48</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">56,0,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>紧跟在 <STRONG>TextBlock</STRONG> 后面，添加第二个 <STRONG>Grid</STRONG> 元素，并为它指定一个 
  Name 属性  <STRONG>Grid2</STRONG>。添加定义两列的子 
  <STRONG>Grid.ColumnDefinitions</STRONG> 元素。此处的 <STRONG>Grid.Row</STRONG> 属性引用 
  <STRONG>Grid1</STRONG> 行，因此，<CODE>Grid.Row="1"</CODE> 表示“将此元素放在 Grid1 
  的第二行中”换句话说，我们在一个 <STRONG>Grid</STRONG> 中嵌入另一个 <STRONG>Grid</STRONG>。列宽度设置 
  <CODE>Width="2*"</CODE> 和 <CODE>Width="3*"</CODE> 要求 <STRONG>Grid2</STRONG> 
  将自身分为 5 个相等的部分。两个部分用于第一列，三个部分用于第二列。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_5c86ee54-ce4d-4417-a92d-b947f2d9c50a');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_5c86ee54-ce4d-4417-a92d-b947f2d9c50a" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Grid2</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
   <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
      <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">2*</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
      <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">3*</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
   <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>紧跟在 <STRONG>Grid2</STRONG> 的列定义后面，在结束标记之前，添加下列 <STRONG>ListView</STRONG> 
  控件。由于未指定任何 <STRONG>Grid.Column</STRONG> 属性，因此，控件将放入 <STRONG>Grid2</STRONG> 的第 
  0 列中。我们暂且将内容留空。稍后我们将为其添加一些内容和一个事件处理程序</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_c7efbea8-e3b5-4b66-a598-c5a4a3528773');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_c7efbea8-e3b5-4b66-a598-c5a4a3528773" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemListView</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN><SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>在结束 <STRONG>ListView</STRONG> 标记后，继续在 Grid2 元素内添加第三个 
  <STRONG>Grid</STRONG>，它包含两行。为它指定 Name 特性 <STRONG>Grid3</STRONG>，并放在 
  <STRONG>Grid2</STRONG> 的右列中。<CODE>Height="Auto"</CODE> 
  设置要求顶行将其高度设置为与内容相同。底行则占用剩下的所有空间。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_6b31be86-e023-4545-96ef-6bc4be5c12da');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_6b31be86-e023-4545-96ef-6bc4be5c12da" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Grid3</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Column</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">&gt;</SPAN>
   <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
      <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
      <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">*</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
   <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>紧靠前一个 <STRONG>RowDefinitions</STRONG> 后面，但在 <STRONG>Grid3</STRONG> 
  结束标记之前，添加 <STRONG>TextBlock</STRONG> 并为其提供一些临时文本。以后，我们将该 
  <STRONG>TextBlock</STRONG> 设置为显示 <STRONG>WebView</STRONG> 中所示的博客文章的标题。此控件不需要 
  <STRONG>x:Name</STRONG> 属性，因为我们不需要在 XAML 或在代码隐藏文件中引用它。 但不要担心；即使没有在 
  <STRONG>MainPage</STRONG> 类中为此控件创建变量，也会在运行时实例化该控件并完全正常工作。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_8cb85c8d-0611-474b-ae06-55dca857860e');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_8cb85c8d-0611-474b-ae06-55dca857860e" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Blog Post Title</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">24</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>紧靠前一个 <STRONG>TextBlock</STRONG> 后面，添加一个 <STRONG>WebView</STRONG> 并将其放在 
  <STRONG>Grid</STRONG> 
  的底行中。此控件显示文章内容，包括图形。我们使用<STRONG>WebView</STRONG>而不是<STRONG>TextBlock</STRONG>或<STRONG>RichTextBlock</STRONG>，因为源内容的格式设置为 
  HTML。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_0bc7abda-84e7-4661-aa88-56b066c52411');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_0bc7abda-84e7-4661-aa88-56b066c52411" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">WebView</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ContentView</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0,5,20,20</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>XAML 树现在应如下所示： 
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_af193ace-2848-41b3-a1b7-17345fabed56');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_af193ace-2848-41b3-a1b7-17345fabed56" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Page</SPAN>
    <SPAN style="color: red;">x:Class</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">SimpleBlogReader.MainPage</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">IsTabStop</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">false</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.microsoft.com/winfx/2006/xaml/presentation</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:x</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.microsoft.com/winfx/2006/xaml</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:local</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">using:SimpleBlogReader</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:d</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.microsoft.com/expression/blend/2008</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:mc</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.openxmlformats.org/markup-compatibility/2006</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">mc:Ignorable</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">d</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Loaded</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">PageLoadedHandler</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>

    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Grid1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Background</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource ApplicationPageBackgroundThemeBrush}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">140</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">*</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>

        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">TitleText</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Main Title of Blog Feed</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">VerticalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Center</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">48</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">56,0,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>

        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Grid2</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">2*</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">3*</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>

            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemListView</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN><SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Grid3</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Column</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">*</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>

                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Blog Post Title</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">24</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">WebView</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ContentView</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0,5,20,20</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Page</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV>此时，你应该能够看到在设计器图面显示的用户界面。现在你也可以按 
  <STRONG>F5</STRONG>，查看到目前为止的显示效果。目前你还看不到任何数据，只能看到用户界面的基本轮廓。按 
  <STRONG>F12</STRONG>，单击断点对话框，然后按 <STRONG>Shift-F5</STRONG> 可返回到代码编辑器。</LI></OL>
<H4><A id="___FeedItem_____"></A><A id="___feeditem_____"></A><A id="___FEEDITEM_____"></A>设置 
<STRONG>FeedItem</STRONG> 数据格式</H4>
<P>基本布局已定义完成，现在我们为 <STRONG>ListView</STRONG> 项添加格式，你应该记得，这些项是 
<STRONG>FeedItem</STRONG> 对象，我们在 FeedData.h 中进行了定义，在 
<STRONG>GetFeedData</STRONG> 方法中进行了初始化，并将其插入了 <STRONG>FeedData::Items</STRONG> 
集合中。我们希望该控件显示源中的每篇博客文章的标题、作者和发布日期。我们的想法是用户可以滚动查看这些项目，然后选择一个感兴趣的项目。在选择一个项时，右侧的 
<STRONG>TextBlock</STRONG> 将使用较大字体显示文章标题，而 <STRONG>WebView</STRONG> 将显示内容。我们希望设置 
<STRONG>ListView</STRONG> 项的显示格式，以使其如下所示：</P>
<P><IMG title="列表项的布局" id="xaml_cpp_listitem_layout" alt="列表项的布局" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC554202.png" 
xmlns=""></P>
<P>要将三个 <STRONG>FeedItem</STRONG> 
属性值合并为一个单元以进行显示，我们可以使用数据模板。数据模板可以定义一段或多段数据的“外观”，并将作为一个 XAML 
节点实现。使用数据模板可以创建融合了文本、图形、动画以及其他 XAML 
功能的新颖生动的信息表示。不过，我们只设置最基本的格式。与前面添加的标题一样，我们可以将每个属性值放在 <STRONG>TextBlock</STRONG> 
中。我们可以使用每个 <STRONG>TextBlock</STRONG> 指定字体大小和其他格式属性，以及一个临时的 Text 值，稍后我们将替换该值。 
要排列 <STRONG>TextBlock</STRONG> 元素，可以使用 
<STRONG>StackPanel</STRONG>。<STRONG>StackPanel</STRONG> 是一个轻型布局面板，它在 XAML 
中经常用于与此类似的小型布局场景。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>创建源项布局</STRONG></P>
<OL>
  <LI>
  <P>在 MainPage.xaml 中的 <STRONG>ListView</STRONG> 节点内，添加一个 
  <STRONG>ItemTemplate</STRONG>，它具有一个 <STRONG>DataTemplate</STRONG> 
  节点作为直接子节点。在类似 <STRONG>ListView</STRONG> 的控件中，<STRONG>DataTemplate</STRONG> 
  始终嵌套在 <STRONG>ItemTemplate</STRONG> 中。这指示控件将模板应用于其项集合中的每个项。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_1aec9df5-d3d9-4143-831f-6463e00841b1');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_1aec9df5-d3d9-4143-831f-6463e00841b1" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView.ItemTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
   <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
   <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView.ItemTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>在 <STRONG>DataTemplate</STRONG> 中，添加一个包含三个 <STRONG>TextBlock</STRONG> 元素的 
  <STRONG>StackPanel</STRONG>，每个元素表示我们希望显示的三个 <STRONG>FeedItem</STRONG> 属性之一。 
  因为没有为 <STRONG>StackPanel</STRONG> 指定方向，<STRONG>TextBlock</STRONG> 
  元素将垂直排列。现在，我们仅为 <STRONG>Text</STRONG> 属性指定一些临时字符串，只是为了提醒我们它们表示的是什么内容。当你按 F5 
  时它们不会显示，因为这并不是实际的项，而只是展示项显示效果的模板。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_df7d8f11-de9b-4cec-b229-64af44045827');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_df7d8f11-de9b-4cec-b229-64af44045827" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN><SPAN style="color: blue;">&gt;</SPAN>
   <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Post title</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">24</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">5,0,0,0</SPAN><SPAN style="color: black;">"</SPAN>
       <SPAN style="color: red;">TextWrapping</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Wrap</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
   <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Post author</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">16</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">15,0,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
   <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Publication Date</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">16</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">15,0,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI><STRONG>ListView</STRONG> 的 XAML 现在应如下所示： 
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_779b5713-9b83-4a18-8c92-4710d72e30dd');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_779b5713-9b83-4a18-8c92-4710d72e30dd" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemListView</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView.ItemTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Post title</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">24</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">5,0,0,0</SPAN><SPAN style="color: black;">"</SPAN>
                     <SPAN style="color: red;">TextWrapping</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Wrap</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Post author</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">16</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">15,0,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Publication Date</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">16</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">15,0,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN><SPAN style="color: blue;">&gt;</SPAN>
         <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView.ItemTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI></OL>
<P>至此，我们已编写了一个用于从源下载实际数据的方法，还设计了一个显示一些临时值的 UI。下一步是添加 XAML 属性，以将实际源数据连接到 
UI。这称为数据绑定。</P>
<H4><A id="____"></A>显示数据</H4>
<P>现在，我们看看如何将数据绑定到 UI，并使用值转换器将一个 <STRONG>DateTime</STRONG> 值转换为 
<STRONG>String</STRONG>。</P>
<H4><A id="______________"></A>使用编程方式向控件中添加内容</H4>
<P>在代码隐藏文件中，你可以通过编程方式将内容插入到控件中。例如，若要填充源标题 
<STRONG>TextBlock</STRONG>，我们可以在事件处理程序中编写以下代码 <CODE>TitleText-&gt;Text = 
feedData-&gt;Title;</CODE>，这将使该文本立即在该控件中进行更新。如果想要了解其工作方式，请记住，我们在 XAML 元素中指定了 
<STRONG>x:Name</STRONG> 属性，如下所示：<CODE>&lt;TextBlock x:Name="TitleText" 
Text="Main Title of Blog Feed" …/&gt;</CODE>。添加该 XAML 元素会导致某个变量在 MainPage.g.h 
中声明：</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_d736ed48-15ee-41e5-b9e7-d33f3b4dd513');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_d736ed48-15ee-41e5-b9e7-d33f3b4dd513" 
dir="ltr">
<DIV style="color: black;">
<PRE>

<SPAN style="color: green;">// MainPage.g.h -- Do Not Paste</SPAN>
<SPAN style="color: blue;">partial</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">class</SPAN> MainPage : <SPAN style="color: blue;">public</SPAN> Windows::UI::Xaml::Controls::Page, 
                              <SPAN style="color: blue;">public</SPAN> Windows::UI::Xaml::Markup::IComponentConnector
{
 	...
	 Windows::UI::Xaml::Controls::TextBlock^ TitleText;
)

</PRE></DIV></DIV></DIV></DIV>
<P>...并在 MainPage.g.hpp 中初始化：</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_72854cf7-49f4-45d1-9a29-68796bcb7488');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_72854cf7-49f4-45d1-9a29-68796bcb7488" 
dir="ltr">
<DIV style="color: black;">
<PRE>

<SPAN style="color: green;">// MainPage.g.hpp -- Do Not Paste</SPAN>
<SPAN style="color: green;">// Get the TextBlock named 'TitleText'</SPAN>
TitleText = safe_cast&lt;Windows::UI::Xaml::Controls::TextBlock^&gt;
    (static_cast&lt;Windows::UI::Xaml::IFrameworkElement^&gt;(<SPAN style="color: blue;">this</SPAN>)-&gt;FindName(<SPAN style="color: rgb(163, 21, 21);">"TitleText"</SPAN>));


</PRE></DIV></DIV></DIV></DIV>
<P>具备该代码后，我们可以在 MainPage.xaml.h 和 MainPage.xaml.cpp 中 <STRONG>MainPage</STRONG> 
部分类的部分中引用该初始化变量。</P>
<H4><A id="______________"></A>使用数据绑定向控件中添加内容</H4>
<P>有时，在代码中动态设置 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.textblock.text.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Text</STRONG></A> 
属性即可奏效。但若要显示数据，通常使用数据绑定将数据源连接到 UI。建立绑定后，如果数据源发生更改，绑定到该数据源的 UI 
元素可以自动反映更改内容。使用数据绑定，全部或几乎全部的代码都将在 XAML 文件中编写，而不是在代码隐藏文件中编写。数据绑定可以实现 View（或 
ViewModel）与其他模块（如 Model 或 Controller）之间更为清晰的划分，这通常是向 XAML 控件中填充内容的建议方法。</P>
<H4><A id="_____"></A>绑定表达式</H4>
<P>要将内容控件绑定到数据源，我们将为控件上的内容属性分配一个 <STRONG>{Binding }</STRONG> 表达式。对于 
<STRONG>TextBlock</STRONG>，内容属性为 <STRONG>Text</STRONG>。我们使用具有 <CODE>Path</CODE> 
值的绑定表达式指示控件绑定到的内容。下面是我们用于 
<STRONG>TitleText</STRONG>&nbsp;<STRONG>TextBlock</STRONG> 的绑定表达式： 
<CODE>Text="{Binding Path=Title}"</CODE>。<CODE>Path</CODE> 值（此处为 
<CODE>Title</CODE>）的含义取决于数据上下文。</P>
<P>我们在代码隐藏文件的 <STRONG>MainPage</STRONG> 构造函数中为整个 XAML 树动态设置默认数据上下文： 
<CODE>this-&gt;DataContext = feedData;</CODE>。由于该语句，<STRONG>TextBlock</STRONG> 
知道“Title”表示 <STRONG>feedData</STRONG> 实例上的 <STRONG>Title</STRONG> 
属性。在该行代码中，“this”是在运行时从 XAML 树构造的 <STRONG>MainPage</STRONG> 实例。设置 
<STRONG>feedData</STRONG> 对象的数据上下文会使其成为此页面的整个对象树的默认数据上下文。 
如有必要，我们可以替代单个元素的上下文。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>将源标题绑定到 
<STRONG>TitleText</STRONG>&nbsp;<STRONG>TextBlock</STRONG></STRONG></P>
<UL>
  <LI>
  <P>修改 <STRONG>Text</STRONG> 特性以绑定到源标题。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_27693890-4f94-4c58-a791-3771af893078');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_27693890-4f94-4c58-a791-3771af893078" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">TitleText</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=Title}</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">VerticalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Center</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">48</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">56,0,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI></UL>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" xmlns=""><STRONG>将 
<STRONG>ListView</STRONG> 项绑定到 <STRONG>dataFeed</STRONG> 的 
<STRONG>Items</STRONG> 属性</STRONG></P>
<UL>
  <LI>
  <P>若要将列表视图连接到数据源，请将此绑定表达式添加到 
  <STRONG>ItemListView</STRONG>：<CODE>ItemsSource="{Binding 
  Path=Items}"</CODE>。然后添加 Margin 值，以便打开标记现在如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_91158271-ba9e-45d3-aa4b-465e8fa28d32');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_91158271-ba9e-45d3-aa4b-465e8fa28d32" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemListView</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">ItemsSource</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=Items}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">10,0,0,10</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI></UL>
<P>既然我们已将 <STRONG>ListView</STRONG> 控件绑定到 <STRONG>FeedData</STRONG> 
项集合，就可以绑定到单个项。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" xmlns=""><STRONG>将 
<STRONG>DataTemplate</STRONG> 项绑定到<STRONG>FeedItem</STRONG>  属性</STRONG></P>
<OL>
  <LI>
  <P>在第一个 <STRONG>TextBlock</STRONG> 中，使用 <CODE>"{Binding Path=Title}"</CODE> 
  替换临时文本，以使元素现在如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_9394aa86-7972-4575-849e-e43958c90817');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_9394aa86-7972-4575-849e-e43958c90817" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=Title}</SPAN><SPAN style="color: black;">"</SPAN>  <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">24</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">5,0,0,0</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">TextWrapping</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Wrap</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>在第二个 <STRONG>TextBlock</STRONG> 中，使用 <CODE>"{Binding Path=Author}"</CODE> 
  替换临时文本，以使元素现在如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_10d6ab59-6387-455b-ad1e-1efe8ec924df');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_10d6ab59-6387-455b-ad1e-1efe8ec924df" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=Author}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">16</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">15,0,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV>
  <P>我们暂且跳过第三个文本框，因为我们需要提供一个自定义转换器来显示 <STRONG>DateTime</STRONG> 值。</P></LI></OL>
<P><A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.listview.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">ListView</STRONG></A> 控件将其项存储为类型 
<STRONG>Platform::Object^</STRONG>，但只要使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh441570.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Platform::Collections::Vector</STRONG></A> 
作为数据源，则类上的专用 Bindable* 方法会自动来回<STRONG>Object^</STRONG>处理元素转换。然后数据绑定如何知道 ListView 
中的对象是具有名为“Title”、“Author”和“PubDate”的属性的 <STRONG>FeedItem</STRONG> 
对象？答案是，它既不知道，也不关心。它直接使用元数据在其集合中查找在对象上具有指定名称的属性。如果你指定的属性名称不存在，或者键错了名称，那么运行时结果为空 
<STRONG>TextBlock</STRONG>。由于运行时容易出现输入问题，因此，需要在编码时小心输入！</P>
<P>剩下的一个数据绑定 <STRONG>TextBlock</STRONG> 是 <STRONG>WebView</STRONG> 控件上方的控件。我们希望此 
<STRONG>TextBlock</STRONG> 显示当前在 <STRONG>ListView</STRONG> 中选择的项目的标题。如果我们直接使用与 
<STRONG>TitleText</STRONG> 控件相同的绑定，我们将显示相同的字符串，因为数据上下文和属性名称是相同的。为了更正这一问题，我们可以在 
<STRONG>Grid</STRONG> 元素（作为 <STRONG>TextBlock</STRONG> 的直接父元素）中设置新数据上下文以覆盖页面上的默认 
<STRONG>DataContext</STRONG> 属性。请注意，我们此处绑定到 XAML 元素上的属性名称，因此，我们使用 
<CODE>ElementName</CODE> 属性指定要绑定到的元素。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>将文章标题数据绑定到当前选定的项目</STRONG></P>
<OL>
  <LI>
  <P>设置 <STRONG>Grid3</STRONG> 中的 <STRONG>DataContext</STRONG> 特性，使开始标记如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_2998f8fd-9ef7-4c37-bc04-8e5be4713b99');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_2998f8fd-9ef7-4c37-bc04-8e5be4713b99" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Name</SPAN> <SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Grid3</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Column</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">DataContext</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding ElementName=ItemListView, Path=SelectedItem}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>使用绑定表达式 <CODE>"{Binding Path=Title}"</CODE> 替换 <STRONG>WebView</STRONG> 上方的 
  <STRONG>TextBlock</STRONG> 中的临时文本，以使元素现在如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_7b2f6b32-e3be-45b2-9b3d-ca5a6507622a');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_7b2f6b32-e3be-45b2-9b3d-ca5a6507622a" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=Title}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">24</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">5,0,0,0</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">TextWrapping</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Wrap</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI></OL>
<P>由于我们在闭合网格元素内设置了新的数据上下文，在运行时，数据绑定机制将在当前选定的 <STRONG>FeedItem</STRONG> 而非 
<STRONG>DataFeed</STRONG> 对象上查找 <STRONG>Title</STRONG> 特性。</P>
<H4><A id="____________"></A>使用值转换器设置数据格式</H4>
<P>在 <STRONG>ItemListView</STRONG>&nbsp;<STRONG>DataTemplate</STRONG> 中，我们将 
<STRONG>PubDate</STRONG> 属性（一个 <STRONG>DateTime</STRONG>）绑定到 
<STRONG>TextBlock.Text</STRONG> 属性。默认情况下，绑定引擎会将 <STRONG>PubDate</STRONG> 从 
<STRONG>DateTime</STRONG> 转换为字符串。但自动转换仅生成 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.foundation.datetime.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Windows::Foundation::DateTime</STRONG></A> 
类型的名称，该名称没有提供详细信息。要生成实际日期，我们有两个选择：我们可以将 <STRONG>FeedItem::PubDate</STRONG> 类型更改为 
<A 
href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh755812.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Platform::String</STRONG></A>^，然后在初始化变量时进行转换，或者创建自定义值转换器并将其数据绑定到该转换器以便在运行时转换值。 
我们选择后一种方法。</P>
<P>若要创建值转换器，我们需创建一个类，该类可实现 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.data.ivalueconverter.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">IValueConverter</STRONG></A> 接口，然后实现 <A 
href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh701934.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Convert</STRONG></A> 方法并选择实现 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh701938.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">ConvertBack</STRONG></A> 
方法。转换器可以将数据从一种类型更改为另一种类型，根据文化背景转换数据，或者修改数据呈现方式的其他方面。在此，我们创建一个非常基本的日期转换器，它可以转换传入的日期值并设置其格式，使其显示日期、月份和年份。（在此演练的第 
2 部分，我们将创建一个功能更为丰富的日期转换器。）</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>创建实现 IValueConverter 的值转换器类</STRONG></P>
<OL>
  <LI>
  <P>在菜单栏上，选择“项目”&gt;“添加新项目”，然后选择“头文件”。<STRONG></STRONG><STRONG></STRONG><STRONG></STRONG>将文件命名为 
  DateConverter.h，并向该文件中添加此类定义：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_a4dc0c13-71f2-421b-a20d-8e621cacecde');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_a4dc0c13-71f2-421b-a20d-8e621cacecde" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: green;">//DateConverter.h</SPAN>

<SPAN style="color: blue;">#pragma</SPAN> once

<SPAN style="color: blue;">namespace</SPAN> SimpleBlogReader
{
<SPAN style="color: blue;">public</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">class</SPAN> DateConverter <SPAN style="color: blue;">sealed</SPAN> : <SPAN style="color: blue;">public</SPAN> Windows::UI::Xaml::Data::IValueConverter  
{
<SPAN style="color: blue;">public</SPAN>:
    <SPAN style="color: blue;">virtual</SPAN> Platform::Object^ Convert(Platform::Object^ value,
        Windows::UI::Xaml::Interop::TypeName targetType,
        Platform::Object^ parameter,
        Platform::String^ culture)
        {
            Windows::Foundation::DateTime dt = (Windows::Foundation::DateTime) value; 
            Windows::Globalization::DateTimeFormatting::DateTimeFormatter^ dtf =
                Windows::Globalization::DateTimeFormatting::DateTimeFormatter::LongDate::<SPAN style="color: blue;">get</SPAN>();
            <SPAN style="color: blue;">return</SPAN> dtf-&gt;Format(dt); 
        }

    <SPAN style="color: blue;">virtual</SPAN> Platform::Object^ ConvertBack(Platform::Object^ value,
        Windows::UI::Xaml::Interop::TypeName targetType,
        Platform::Object^ parameter,
        Platform::String^ culture)
        {   
            <SPAN style="color: green;">//Not used. Left as exercise for the reader!</SPAN>
            <SPAN style="color: blue;">throw</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Platform::NotImplementedException();
        }
    };
}


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>将此 <CODE>#include</CODE> 指令添加到 MainPage.xaml.h： 
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_87fd8d28-74b9-4980-8650-be20bf8e5f76');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_87fd8d28-74b9-4980-8650-be20bf8e5f76" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
#include <SPAN style="color: rgb(163, 21, 21);">"DateConverter.h"</SPAN>

</PRE></DIV></DIV></DIV></DIV>
  <P>尽管在我们自己的代码隐藏中并未引用该文件，但我们仍需包含该文件，因为 Visual Studio 生成过程需要该文件来生成数据绑定代码。 
  </P></LI>
  <LI>
  <P>在 MainPage.xaml 中，将该类的一个实例声明为资源。将以下 <STRONG>Page.Resources</STRONG> 节点粘贴到开始 
  <STRONG>Page</STRONG> 标记和 <STRONG>Grid1</STRONG> 元素之间。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_ab91176f-b56c-4648-93b8-7d5fd1d95a40');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_ab91176f-b56c-4648-93b8-7d5fd1d95a40" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
  <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">local</SPAN><SPAN style="color: blue;">:</SPAN><SPAN style="color: rgb(163, 21, 21);">DateConverter</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">dateConverter</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
  <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV>
  <P><STRONG>Page</STRONG> 标记已具有一个 XML 命名空间映射，使我们可以访问项目中在  
  <STRONG>SimpleBlogReader</STRONG> 命名空间中声明的类： 
  <CODE>xmlns:local="using:SimpleBlogReader"</CODE>。如果没有该映射，我们将无法在此处看到 
  <STRONG>DateConverter</STRONG> 类。</P></LI>
  <LI>现在，我们可以将 <STRONG>PubDate</STRONG>&nbsp;<STRONG>TextBlock</STRONG> 绑定到我们的 
  <STRONG>DateConverter</STRONG>： 
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_8217706c-aca3-400e-b3d7-8211558dab13');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_8217706c-aca3-400e-b3d7-8211558dab13" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=PubDate, Converter={StaticResource dateConverter}}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">16</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">15,0,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV>
  <P>通过此 XAML，绑定引擎使用我们的自定义 <STRONG>DateConverter</STRONG> 将 
  <STRONG>DateTime</STRONG> 更改为字符串。它返回的字符串已设置为我们需要的格式，只含有日、月和年。</P></LI></OL>
<H4><A id="__WebView_____HTML"></A><A id="__webview_____html"></A><A id="__WEBVIEW_____HTML"></A>在 
<STRONG>WebView</STRONG> 中显示 HTML</H4>
<P>若要在我们的应用中显示博客文章，我们必须获取要在 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.webview.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">WebView</STRONG></A> 
控件中显示的文章内容。<STRONG>WebView</STRONG> 控件为我们提供了一种在应用中托管 HTML 数据的方法。</P>
<P>我们已将 <STRONG>WebView</STRONG> 添加到嵌套 <STRONG>Grid</STRONG> 的右列中，并为其提供 
<STRONG>ContentView</STRONG> 的 <STRONG>x:Name</STRONG>，因为我们需要用于在 
<STRONG>MainPage</STRONG> 类中引用的变量。</P>
<P>当我们查看 <STRONG>WebView</STRONG> 的 <STRONG>Source</STRONG> 属性时，将注意到它需要 URI 才能显示 
Web 页面。我们的 HTML 数据只不过是 HTML 的字符串。它没有包含可以绑定到 <STRONG>Source</STRONG> 属性的 
URI。幸运的是，我们可以将自己的 <STRONG>FeedItem::Content</STRONG> 属性传递给 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.webview.navigatetostring.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">NavigateToString</STRONG></A> 
方法。要实现该功能，我们处理 <STRONG>ListView</STRONG> 的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.primitives.selector.selectionchanged.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">SelectionChanged</STRONG></A> 事件。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" xmlns=""><STRONG>将 
<STRONG>WebView</STRONG> 连接到选定项目的 <STRONG>FeedItem::Content</STRONG> 
属性</STRONG></P>
<OL>
  <LI>
  <P>在 XAML 文件中为 <STRONG>ListView</STRONG> 指定一个 
  <STRONG>SelectionChanged</STRONG> 事件处理程序。设置 <STRONG>SelectionChanged</STRONG> 
  属性并指定属性名称以调用事件处理程序方法，以使起始标记现在如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_27899b97-1275-4fdb-bc42-249c23e1d9d2');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_27899b97-1275-4fdb-bc42-249c23e1d9d2" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemListView</SPAN><SPAN style="color: black;">"</SPAN>
          <SPAN style="color: red;">ItemsSource</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=Items}</SPAN><SPAN style="color: black;">"</SPAN>
          <SPAN style="color: red;">SelectionChanged</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemListView_SelectionChanged</SPAN><SPAN style="color: black;">"</SPAN>
          <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">10,0,0,10</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>如同之前所创建的事件处理程序一样，现在我们必须在代码隐藏中创建事件处理程序。首先，将此行代码添加到 MainPage.xaml.h：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_8aff4bcb-9f55-42c7-bd60-9aaba92355ca');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_8aff4bcb-9f55-42c7-bd60-9aaba92355ca" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: green;">// Declaration in MainPage.xaml.h</SPAN>

<SPAN style="color: blue;">public</SPAN>:
    <SPAN style="color: blue;">void</SPAN> ItemListView_SelectionChanged(Platform::Object^ sender,
                                   Windows::UI::Xaml::Controls::SelectionChangedEventArgs^ e);


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>在 MainPage.xaml.cpp 中添加方法实现：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_738bce71-3432-487e-b778-2309ed3c3d64');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_738bce71-3432-487e-b778-2309ed3c3d64" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">void</SPAN> MainPage::ItemListView_SelectionChanged ( 
    Platform::Object^ sender,
    Windows::UI::Xaml::Controls::SelectionChangedEventArgs^ e)
{
    FeedItem^ feedItem = safe_cast&lt;FeedItem^&gt;(ItemListView-&gt;SelectedItem);
    <SPAN style="color: green;">// Navigate the WebView to the blog post content HTML string.</SPAN>
    ContentView-&gt;NavigateToString(feedItem-&gt;Content);
}


</PRE></DIV></DIV></DIV></DIV></LI></OL>
<P>现在我们具有了一个基本的单页应用。如果按 F5，应显示如下图所示的一些内容。要中断应用，并返回到 Visual Studio IDE，请按 
F12。</P>
<P><IMG title="完成的简单博客阅读器视图。" id="xaml_cpp_final_view" alt="完成的简单博客阅读器视图。" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC587748.png" 
xmlns=""></P>
<P class="note"><STRONG>提示</STRONG>&nbsp;&nbsp;为了获得更好的调试体验，请从公共 Microsoft 
符号服务器下载调试符号。在主菜单上，选择“工具”，然后选择“选项”<STRONG></STRONG><STRONG></STRONG>。在“选项”窗口中，展开“调试”，选中“符号”，然后选中“Microsoft 
符号服务器”旁边的复选框。<STRONG></STRONG><STRONG></STRONG><STRONG></STRONG><STRONG></STRONG>。第一次下载它们时可能需要花费一些时间。若要在下次按 
F5 时获得更快的性能，请指定一个缓存符号的本地目录。</P>
<P>以下是 MainPage.xaml 的完整 XAML 树。</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_8cd39b93-92e5-427c-839e-37763928f6b7');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_8cd39b93-92e5-427c-839e-37763928f6b7" 
dir="ltr">
<DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Page</SPAN>
    <SPAN style="color: red;">x:Class</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">SimpleBlogReader.MainPage</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.microsoft.com/winfx/2006/xaml/presentation</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:x</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.microsoft.com/winfx/2006/xaml</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:local</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">using:SimpleBlogReader</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:d</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.microsoft.com/expression/blend/2008</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">xmlns:mc</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">http://schemas.openxmlformats.org/markup-compatibility/2006</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">mc:Ignorable</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">d</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Loaded</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">PageLoadedHandler</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">local</SPAN><SPAN style="color: blue;">:</SPAN><SPAN style="color: rgb(163, 21, 21);">DateConverter</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">dateConverter</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>        
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>

    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Background</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource ApplicationPageBackgroundThemeBrush}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">140</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">*</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">TitleText</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=Title}</SPAN><SPAN style="color: black;">"</SPAN>
                   <SPAN style="color: red;">VerticalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Center</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">48</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">56,0,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">2*</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">3*</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemListView</SPAN><SPAN style="color: black;">"</SPAN>
                      <SPAN style="color: red;">ItemsSource</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=Items}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">10,0,0,10</SPAN><SPAN style="color: black;">"</SPAN>
                      <SPAN style="color: red;">SelectionChanged</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemListView_SelectionChanged</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView.ItemTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=Title}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">24</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">5,0,0,0</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">TextWrapping</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Wrap</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=Author}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">16</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">15,0,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>                            
                            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=PubDate, Converter={StaticResource dateConverter}}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">16</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">15,0,0,0</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>                            
                        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView.ItemTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Grid.Column</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">DataContext</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding ElementName=ItemListView, Path=SelectedItem}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">*</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Path=Title}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">24</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">5,0,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">WebView</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ContentView</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0,5,20,20</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Page</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV>
<P>这是第 1 部分的结尾。现在，你已创建了一个适用于大多数情况的基本应用，并在该过程中学习了 XAML 的基础知识及其相关的代码隐藏文件。</P>
<H3><A id="________2.0__"></A>简单博客阅读器，2.0 版</H3>
<P>我们已经了解了 XAML 和 C++/CX 的基本知识，现在可以采用更接近真实世界应用的方式创建一个版本。我们的 SimpleBlogReader 2.0 
具有下列功能：</P>
<UL>
  <LI>它支持多个博客源。</LI>
  <LI>如果前台中存在其他任务，则系统会将其关闭。SimpleBlogReader 2.0 支持进程周期管理 (PLM) 
  并能正确保存和重新加载其状态。</LI>
  <LI>它可以适应不同的视图状态，包括屏幕分辨率和设备方向（横向或纵向），以及视图状态（铺屏或填充）。</LI>
  <LI>它通过简单的动画和过渡，让用户界面栩栩如生。</LI>
  <LI>它使用不同的样式增强应用的视觉吸引力。</LI></UL>
<H3><A id="adding_pages_and_navigation"></A><A 
id="ADDING_PAGES_AND_NAVIGATION"></A>添加页面和导航</H3>
<P> 如果要支持多个博客，我们必须向应用中添加一些页面，并处理这些页面间的导航。幸运的是，Visual Studio 
提供了多个页面模板，可以实现我们需要的大多数页面导航和定向功能。为了升级应用，我们将放弃之前努力创建的空白页面，但是会秉承基本理念，重复使用部分代码。更重要的是，我们在使用复杂方法创建该页面过程中所获得的知识可以帮助我们更好地理解如何借助 
Visual Studio 中提供的页面模板以简单的方式创建 Metro 风格应用。</P>
<P>首先，我们需要一个列出所有 Windows 团队博客的页面；我们可以使用 Items Page 
模板实现此目的。当读者从此页面中选择一个博客时，我们会将该博客的文章列表加载到另一个页面中。我们之前创建的 MainPage.xaml 
页面仍然适用，但是我们会使用 SplitPage 
模板获取页面导航和视图状态支持。我们还将添加一个详细信息页面，以使用户无需列表视图即可选择阅读各篇博客文章，从而节省空间。每个模板中都内置有丰富的导航支持。我们的主要任务是要为 
LoadState 和 SaveState 
方法（存根在每个代码定义的类中）写入自定义逻辑，并添加一个应用栏，其中包含一个用于启用从拆分页面到详细信息页面的转发导航的按钮。</P>
<H4><A id="page_templates"></A><A id="PAGE_TEMPLATES"></A>页面模板</H4>
<P>Visual Studio Express 2012 for Windows 8 
附带了一个页面模板的集合，这些模板对于多种情形都很有用。以下是可用的页面模板。</P>
<TABLE>
  <TBODY>
  <TR>
    <TH>页面类型</TH>
    <TH>说明</TH></TR>
  <TR>
    <TD>
      <P>组详细信息页面</P></TD>
    <TD>
      <P>显示一个组的详细信息以及组中各项的预览。</P></TD></TR>
  <TR>
    <TD>
      <P>分组的项页面</P></TD>
    <TD>
      <P>显示分组的集合。</P></TD></TR>
  <TR>
    <TD>
      <P>项详细信息页面</P></TD>
    <TD>
      <P>显示一个项的详细信息，并支持导航至相邻的项。</P></TD></TR>
  <TR>
    <TD>
      <P>项页面</P></TD>
    <TD>
      <P>显示一组项。</P></TD></TR>
  <TR>
    <TD>
      <P>拆分页面</P></TD>
    <TD>
      <P>显示项列表以及所选项的详细信息。</P></TD></TR>
  <TR>
    <TD>
      <P>基本页面</P></TD>
    <TD>
      <P>具有布局意识、标题以及后退按钮的空页面。</P></TD></TR>
  <TR>
    <TD>
      <P>空页面</P></TD>
    <TD>
      <P>Metro 风格应用的空页面。</P></TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>向应用中添加新页面</STRONG></P>
<OL>
  <LI>
  <P>在菜单栏上，选择“项目”&gt;“添加新项目”。<STRONG></STRONG><STRONG></STRONG>将打开“添加新项目”<STRONG></STRONG>对话框。</P></LI>
  <LI>
  <P>在“已安装”窗格中，展开“Visual C++”<STRONG></STRONG><STRONG></STRONG>。</P></LI>
  <LI>
  <P>为 Metro 风格应用项目选择模板。</P></LI>
  <LI>
  <P>在中心窗格中，选择“项页面”并接受默认名称<STRONG></STRONG>。</P></LI>
  <LI>当对话框询问你是否要自动添加必需的文件时，请选择“是”<STRONG></STRONG>。在应用终止和恢复时，这些文件将添加到 Common 
  文件夹，并包含基类和其他用于支持不同的视图状态以及序列化和取消序列化简单类型的代码。</LI>
  <LI>
  <P>选择“添加”按钮<STRONG></STRONG>。页面的 XAML 和代码隐藏文件现已添加到项目中。</P></LI>
  <LI>
  <P>重复步骤 1 至 5，但选择“拆分页面”<STRONG></STRONG>。</P></LI>
  <LI>
  <P>重复步骤 1 至 5，但选择“基本页面”<STRONG></STRONG>。将此页面命名为 "DetailPage"。</P></LI></OL>
<P>“项页面”将显示 Windows 团队博客的列表。“拆分页面”将在左侧显示每个博客的文章，在右侧显示选定文章的内容，这与我们之前创建的 MainPage 
类似。“基本页面”将仅显示选定文章的内容、“后退”按钮和页面标题。在此页面上，不会从 HTML 的某个字符串将文章内容加载到 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.webview.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">WebView</STRONG></A> 中（就像在 SplitView 
页面中执行的操作一样），而是导航到该文章的 URL 并显示实际的网页。执行此操作后，应用的页面将如下所示：</P><IMG title="三个页面的导航示例" 
id="xaml_NavExample" alt="三个页面的导航示例" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC600942.png" 
xmlns="">
<P>将页面模板添加到项目中并查看 XAML 
和代码隐藏时，显然这些页面模板为我们完成了许多工作。事实上，起初可能容易迷惑，但了解每个页面模板包含三个主要部分将很有帮助：</P>
<TABLE>
  <TBODY>
  <TR>
    <TD>
      <P>资源</P></TD>
    <TD>
      <P>“资源”部分定义页面的样式和数据模板。我们将在<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045.aspx#creating_a_consistent_look_with_styles">使用样式创建一致性外观</A>部分作进一步的介绍。</P></TD></TR>
  <TR>
    <TD>
      <P>视觉状态管理器</P></TD>
    <TD>
      <P>“视觉状态管理器 (VSM)”中定义使应用适应不同布局和方向的动画和转换。我们将在<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045.aspx#adapting_to_different_layouts">适应不同布局</A>部分作进一步介绍。</P></TD></TR>
  <TR>
    <TD>
      <P>应用内容</P></TD>
    <TD>
      <P>构成应用 UI 的控件和内容在根布局面板中定义。</P></TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<P>升级到 v2.0 的首要任务就是要修改数据类，以便获取每个博客的 FeedData^ 
对象。我们不但希望能够独立于其他博客源下载每个博客源，而且还希望能够在部分源完成下载时单击已下载的源。此功能应该有它自己的类，因为我们要添加新类，所以也可以将我们的数据类分出到相应的 
.h 和 .cpp 文件中。我们将创建一个名为 FeedDataSource 的新类，用于处理下载逻辑。 
这将使我们能够更加清晰地区分我们的数据模型与我们的用户界面。我们将通过 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh441570.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Platform::Collections::Vector</STRONG></A>&lt;FeedData^&gt;^ 
类型的 FeedDataSource 上的某个属性公开该数据。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>修改数据类</STRONG></P>
<OL>
  <LI>使用以下代码覆盖 FeedData.h 的内容。请注意，我们添加了一个代表源集合的新类 FeedDataSource，并提供了用于下载它们的功能。 
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_921e8b1d-e8c1-4251-8d7f-a7746690bb00');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_921e8b1d-e8c1-4251-8d7f-a7746690bb00" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: green;">//feeddata.h</SPAN>

<SPAN style="color: blue;">#pragma</SPAN> once
#include <SPAN style="color: rgb(163, 21, 21);">"pch.h"</SPAN>
#include &lt;collection.h&gt;


<SPAN style="color: blue;">namespace</SPAN> SimpleBlogReader
{
    <SPAN style="color: green;">// To be bindable, a class must be defined within a namespace</SPAN>
    <SPAN style="color: green;">// and a bindable attribute needs to be applied.</SPAN>
    <SPAN style="color: green;">// A FeedItem represents a single blog post.</SPAN>
    [Windows::UI::Xaml::Data::Bindable]
    <SPAN style="color: blue;">public</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">class</SPAN> FeedItem <SPAN style="color: blue;">sealed</SPAN>
    {
    <SPAN style="color: blue;">public</SPAN>:
        FeedItem(<SPAN style="color: blue;">void</SPAN>){}

        property Platform::String^ Title;
        property Platform::String^ Author;
        property Platform::String^ Content;      
        property Windows::Foundation::DateTime PubDate;      
        property Windows::Foundation::Uri^ Link;

    <SPAN style="color: blue;">private</SPAN>:
        ~FeedItem(<SPAN style="color: blue;">void</SPAN>){}
    };

    <SPAN style="color: green;">// A FeedData object represents a feed that contains </SPAN>
    <SPAN style="color: green;">// one or more FeedItems. </SPAN>
    [Windows::UI::Xaml::Data::Bindable]
    <SPAN style="color: blue;">public</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">class</SPAN> FeedData <SPAN style="color: blue;">sealed</SPAN>
    {
    <SPAN style="color: blue;">public</SPAN>:
        FeedData(<SPAN style="color: blue;">void</SPAN>)
        {
            m_items = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Platform::Collections::Vector&lt;FeedItem^&gt;();
        }

        <SPAN style="color: green;">// The public members must be Windows Runtime types so that</SPAN>
        <SPAN style="color: green;">// the XAML controls can bind to them from a separate .winmd.</SPAN>
        property Platform::String^ Title;            
        property Windows::Foundation::Collections::IVector&lt;FeedItem^&gt;^ Items
        {
            Windows::Foundation::Collections::IVector&lt;FeedItem^&gt;^ <SPAN style="color: blue;">get</SPAN>() {<SPAN style="color: blue;">return</SPAN> m_items; }
        }

        property Platform::String^ Description;
        property Windows::Foundation::DateTime PubDate;
        property Platform::String^ Uri;

    <SPAN style="color: blue;">private</SPAN>:
        ~FeedData(<SPAN style="color: blue;">void</SPAN>){}

        Platform::Collections::Vector&lt;FeedItem^&gt;^ m_items;
    };   

    <SPAN style="color: green;">// A FeedDataSource represents a collection of FeedData objects</SPAN>
    <SPAN style="color: green;">// and provides the methods to download the source data from which</SPAN>
    <SPAN style="color: green;">// FeedData and FeedItem objects are constructed. This class is </SPAN>
    <SPAN style="color: green;">// instantiated at startup by this declaration in the </SPAN>
    <SPAN style="color: green;">// ResourceDictionary in app.xaml: &lt;local:FeedDataSource x:Key="feedDataSource" /&gt;</SPAN>
    [Windows::UI::Xaml::Data::Bindable]
    <SPAN style="color: blue;">public</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">class</SPAN> FeedDataSource <SPAN style="color: blue;">sealed</SPAN>
    {
    <SPAN style="color: blue;">private</SPAN>:
        Platform::Collections::Vector&lt;FeedData^&gt;^ m_feeds;
        std::map&lt;Platform::String^, concurrency::task_completion_event&lt;FeedData^&gt;&gt; m_feedCompletionEvents;
        FeedData^ GetFeedData(Platform::String^ feedUri, Windows::Web::Syndication::SyndicationFeed^ feed);       

    <SPAN style="color: blue;">public</SPAN>:
        FeedDataSource();
        property Windows::Foundation::Collections::IObservableVector&lt;FeedData^&gt;^ Feeds
        {
            Windows::Foundation::Collections::IObservableVector&lt;FeedData^&gt;^ <SPAN style="color: blue;">get</SPAN>()
            {
                <SPAN style="color: blue;">return</SPAN> <SPAN style="color: blue;">this</SPAN>-&gt;m_feeds;
            }
        }
        <SPAN style="color: blue;">void</SPAN> InitDataSource();
        <SPAN style="color: blue;">static</SPAN> Windows::Foundation::IAsyncOperation&lt;FeedData^&gt;^ GetFeedAsync(Platform::String^ title);
        <SPAN style="color: blue;">static</SPAN> FeedItem^ GetFeedItem(FeedData^ fd, Platform::String^ uniqueiD);
    };
}

</PRE></DIV></DIV></DIV></DIV>
  <P>通过选择“项目”|“新建项目”像以前一样创建一个新 .cpp 文件，并将其称为 FeedData.cpp。然后将以下代码复制并粘贴到该文件中：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_2640064b-eef0-48fd-aeb3-af9cfa086c1b');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_2640064b-eef0-48fd-aeb3-af9cfa086c1b" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

#include <SPAN style="color: rgb(163, 21, 21);">"pch.h"</SPAN>
#include <SPAN style="color: rgb(163, 21, 21);">"FeedData.h"</SPAN>


<SPAN style="color: blue;">using</SPAN> <SPAN style="color: blue;">namespace</SPAN> std;
<SPAN style="color: blue;">using</SPAN> <SPAN style="color: blue;">namespace</SPAN> concurrency;
<SPAN style="color: blue;">using</SPAN> <SPAN style="color: blue;">namespace</SPAN> SimpleBlogReader;
<SPAN style="color: blue;">using</SPAN> <SPAN style="color: blue;">namespace</SPAN> Platform;
<SPAN style="color: blue;">using</SPAN> <SPAN style="color: blue;">namespace</SPAN> Platform::Collections;
<SPAN style="color: blue;">using</SPAN> <SPAN style="color: blue;">namespace</SPAN> Windows::Foundation;
<SPAN style="color: blue;">using</SPAN> <SPAN style="color: blue;">namespace</SPAN> Windows::Web::Syndication;



FeedDataSource::FeedDataSource()
{
    m_feeds = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Vector&lt;FeedData^&gt;();
}

<SPAN style="color: green;">// Retrieve the data for each atom or rss feed and put it</SPAN>
<SPAN style="color: green;">// into our custom data structures.</SPAN>
<SPAN style="color: blue;">void</SPAN> FeedDataSource::InitDataSource()
{
    <SPAN style="color: green;">// Left as an exercise: store the urls separately and let the user configure them.</SPAN>
    <SPAN style="color: green;">// It might be more convenient to use Platform::Strings here, but using wstring </SPAN>
    <SPAN style="color: green;">// serves to demonstrate how standard C++ types can be used here.</SPAN>
    std::vector&lt;std::wstring&gt; urls; 
    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows/b/developers/atom.aspx"</SPAN>);
    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows/b/windowsexperience/atom.aspx"</SPAN>);
    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows/b/extremewindows/atom.aspx"</SPAN>);

    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows/b/business/atom.aspx"</SPAN>);
    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows/b/bloggingwindows/atom.aspx"</SPAN>);
    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows/b/windowssecurity/atom.aspx"</SPAN>);
    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows/b/springboard/atom.aspx"</SPAN>);
    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows/b/windowshomeserver/atom.aspx"</SPAN>);
    <SPAN style="color: green;">// There is no Atom feed for this blog, so we use the RSS feed.</SPAN>
    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows_live/b/windowslive/rss.aspx"</SPAN>);
    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows_live/b/developer/atom.aspx"</SPAN>);
    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/ie/b/ie/atom.aspx"</SPAN>);
    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows_phone/b/wpdev/atom.aspx"</SPAN>);
    urls.push_back(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com/windows_phone/b/wmdev/atom.aspx"</SPAN>);

    <SPAN style="color: green;">// If we are resuming, we need to create a map of completion events so that</SPAN>
    <SPAN style="color: green;">// we don't attempt to restore page's state before it's backing data has been loaded.</SPAN>
    <SPAN style="color: green;">// First we create all the  events in an "unset" state, mapped to the urls as keys.</SPAN>
    <SPAN style="color: green;">// we'll set the event after we asynchronously load the feed.</SPAN>
    <SPAN style="color: blue;">for</SPAN>( wstring url : urls)
    {
        String^ uri = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> String(url.c_str());
        task_completion_event&lt;FeedData^&gt; e;
        m_feedCompletionEvents.insert(make_pair(uri, e));
    }

    SyndicationClient^ client = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> SyndicationClient();   

    <SPAN style="color: green;">// Range-based for loop. Never write a regular for loop again!</SPAN>
    <SPAN style="color: blue;">for</SPAN>(wstring url : urls)
    {
        <SPAN style="color: green;">// Create the async operation. feedOp is an </SPAN>
        <SPAN style="color: green;">// IAsyncOperationWithProgress&lt;SyndicationFeed^, RetrievalProgress&gt;^</SPAN>

        String^ uri = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> String(url.c_str());
        auto feedUri = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Uri(uri);
        auto feedOp = client-&gt;RetrieveFeedAsync(feedUri);

        <SPAN style="color: green;">// Create the task object and pass it the async operation.</SPAN>
        <SPAN style="color: green;">// SyndicationFeed^ is the type of the return value</SPAN>
        <SPAN style="color: green;">// that the feedOp operation will eventually produce.       </SPAN>

        <SPAN style="color: green;">// Then, initialize a FeedData object with the feed info. Each</SPAN>
        <SPAN style="color: green;">// operation is independent and does not have to happen on the</SPAN>
        <SPAN style="color: green;">// UI thread. Therefore, we specify use_arbitrary.</SPAN>
        create_task(feedOp)

        .then([<SPAN style="color: blue;">this</SPAN>, uri]  (SyndicationFeed^ feed) -&gt; FeedData^
        {
            <SPAN style="color: blue;">return</SPAN> GetFeedData(uri, feed);
        }, concurrency::task_continuation_context::use_arbitrary())


        <SPAN style="color: green;">// Append the initialized FeedData object to the list</SPAN>
        <SPAN style="color: green;">// that is the data source for the items collection.</SPAN>
        <SPAN style="color: green;">// This has to happen on the UI thread. By default, a .then</SPAN>
        <SPAN style="color: green;">// continuation runs in the same apartment thread that it was called on.</SPAN>
        <SPAN style="color: green;">// Because the actions will be synchronized for us, we can append </SPAN>
        <SPAN style="color: green;">// safely to the Vector without taking an explicit lock.</SPAN>
        .then([<SPAN style="color: blue;">this</SPAN>] (FeedData^ fd)
        {
            m_feeds-&gt;Append(fd);
            m_feedCompletionEvents[fd-&gt;Uri].<SPAN style="color: blue;">set</SPAN>(fd);

            <SPAN style="color: green;">// Write to VS output window in debug mode only. Requires &lt;windows.h&gt;.</SPAN>
            OutputDebugString(fd-&gt;Title-&gt;Data());
            OutputDebugString(L<SPAN style="color: rgb(163, 21, 21);">"\r\n"</SPAN>);
        })

        <SPAN style="color: green;">// The last continuation serves as an error handler. The</SPAN>
        <SPAN style="color: green;">// call to get() will surface any exceptions that were raised</SPAN>
        <SPAN style="color: green;">// at any point in the task chain.</SPAN>
        .then( [] (task&lt;<SPAN style="color: blue;">void</SPAN>&gt; t)
        {
            <SPAN style="color: blue;">try</SPAN>
            {
                t.<SPAN style="color: blue;">get</SPAN>();
            }
            <SPAN style="color: green;">// SyndicationClient throws Platform::InvalidArgumentException </SPAN>
            <SPAN style="color: green;">// if a URL contains illegal characters.</SPAN>
            <SPAN style="color: green;">// We catch this exception for demonstration purposes only.</SPAN>
            <SPAN style="color: green;">// In the current design of this app, an illegal</SPAN>
            <SPAN style="color: green;">// character can only be introduced by a coding error</SPAN>
            <SPAN style="color: green;">// and should not be caught. If we modify the app to allow</SPAN>
            <SPAN style="color: green;">// the user to manually add a new url, then we need to catch</SPAN>
            <SPAN style="color: green;">// the exception.</SPAN>
            <SPAN style="color: blue;">catch</SPAN>(Platform::InvalidArgumentException^ e)
            {
                <SPAN style="color: green;">// For example purposes we just output error to console.</SPAN>
                <SPAN style="color: green;">// In a real world app that allowed the user to enter</SPAN>
                <SPAN style="color: green;">// a url manually, you could prompt them to try again.</SPAN>
                OutputDebugString(e-&gt;Message-&gt;Data());
            }
        }); <SPAN style="color: green;">//end task chain</SPAN>
    };
}


FeedData^ FeedDataSource::GetFeedData(String^ feedUri, SyndicationFeed^ feed)
{

    FeedData^ feedData = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> FeedData();

    <SPAN style="color: green;">// Knowing this makes it easier to map completion_events </SPAN>
    <SPAN style="color: green;">// when we resume from termination.</SPAN>
    feedData-&gt;Uri = feedUri;

    <SPAN style="color: green;">// Get the title of the feed (not the individual posts).</SPAN>
    feedData-&gt;Title = feed-&gt;Title-&gt;Text; 

    <SPAN style="color: blue;">if</SPAN> (feed-&gt;Subtitle-&gt;Text != nullptr)
    {
        feedData-&gt;Description = feed-&gt;Subtitle-&gt;Text;
    }	 
    <SPAN style="color: green;">// Use the date of the latest post as the last updated date.</SPAN>
    feedData-&gt;PubDate = feed-&gt;Items-&gt;GetAt(0)-&gt;PublishedDate;	

    <SPAN style="color: green;">// Construct a FeedItem object for each post in the feed</SPAN>
    <SPAN style="color: green;">// using a range-based for loop. Preferable to a </SPAN>
    <SPAN style="color: green;">// C-style for loop, or std::for_each.</SPAN>
    <SPAN style="color: blue;">for</SPAN> (auto  item : feed-&gt;Items)
    {
        FeedItem^ feedItem = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> FeedItem();
        feedItem-&gt;Title = item-&gt;Title-&gt;Text; 
        feedItem-&gt;PubDate = item-&gt;PublishedDate;		

        <SPAN style="color: green;">//We only get first author in case of multiple entries.</SPAN>
        feedItem-&gt;Author = item-&gt;Authors-&gt;GetAt(0)-&gt;Name; 

        <SPAN style="color: blue;">if</SPAN> (feed-&gt;SourceFormat == SyndicationFormat::Atom10)
        {
            feedItem-&gt;Content = item-&gt;Content-&gt;Text;
            String^ s(L<SPAN style="color: rgb(163, 21, 21);">"http://windowsteamblog.com"</SPAN>);
            feedItem-&gt;Link = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Uri(s + item-&gt;Id);
        }

        <SPAN style="color: blue;">else</SPAN> <SPAN style="color: blue;">if</SPAN> (feed-&gt;SourceFormat == SyndicationFormat::Rss20)
        {
            feedItem-&gt;Content = item-&gt;Summary-&gt;Text;
            feedItem-&gt;Link = item-&gt;Links-&gt;GetAt(0)-&gt;Uri;
        }

        feedData-&gt;Items-&gt;Append(feedItem);
    };

    <SPAN style="color: blue;">return</SPAN> feedData;

} <SPAN style="color: green;">//end GetFeedData</SPAN>


<SPAN style="color: green;">// We use this method to get the proper FeedData object when resuming</SPAN>
<SPAN style="color: green;">// from shutdown. We need to wait for this data to be populated before</SPAN>
<SPAN style="color: green;">// we attempt to restore page state. Note the use of task_completion_event</SPAN>
<SPAN style="color: green;">// which doesn't block the UI thread.</SPAN>
IAsyncOperation&lt;FeedData^&gt;^ FeedDataSource::GetFeedAsync(String^ uri)
{
    <SPAN style="color: blue;">return</SPAN> create_async([uri]()
    {
        auto feedDataSource = safe_cast&lt;FeedDataSource^&gt;( 
            App::Current-&gt;Resources-&gt;Lookup(<SPAN style="color: rgb(163, 21, 21);">"feedDataSource"</SPAN>));

        <SPAN style="color: green;">// Does not block the UI thread.</SPAN>
        auto f = feedDataSource-&gt;m_feedCompletionEvents[uri];

        <SPAN style="color: green;">// In the callers we continue from this task after the event is </SPAN>
        <SPAN style="color: green;">// set in InitDataSource and we know we have a FeedData^.</SPAN>
        task&lt;FeedData^&gt; t = create_task(f);
        <SPAN style="color: blue;">return</SPAN> t;
    });
}

<SPAN style="color: green;">// We stored the stringID when the app was suspended</SPAN>
<SPAN style="color: green;">// because storing the FeedItem itself would have required</SPAN>
<SPAN style="color: green;">// more custom serialization code. Here is where we retrieve</SPAN>
<SPAN style="color: green;">// the FeedItem based on its string ID.</SPAN>
FeedItem^ FeedDataSource::GetFeedItem(FeedData^ feed, String^ uniqueId)
{
    auto itEnd = end(feed-&gt;Items);
    auto it = std::find_if(begin(feed-&gt;Items), itEnd, 
        [uniqueId] (FeedItem^ fi)
    {
        <SPAN style="color: blue;">return</SPAN> fi-&gt;Title == uniqueId;
    });

    <SPAN style="color: blue;">if</SPAN> (it != itEnd)
        <SPAN style="color: blue;">return</SPAN> safe_cast&lt;FeedItem^&gt;(*it);

    <SPAN style="color: blue;">return</SPAN> nullptr;
}


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>将必要的 <CODE>#include</CODE> 指令添加到 pch.h，使其如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_502b40ad-7041-41a6-9c87-f0708f49e62e');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_502b40ad-7041-41a6-9c87-f0708f49e62e" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">#pragma</SPAN> once

#include &lt;collection.h&gt;
#include &lt;ppltasks.h&gt;
#include &lt;<SPAN style="color: blue;">string</SPAN>&gt;
#include &lt;map&gt;
#include <SPAN style="color: rgb(163, 21, 21);">"dateConverter.h"</SPAN>
#include <SPAN style="color: rgb(163, 21, 21);">"App.xaml.h"</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>将此 <CODE>#include</CODE> 指令添加到 app.xaml.h：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_f06f60ec-b91c-421d-a47e-8425d934bd4a');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_f06f60ec-b91c-421d-a47e-8425d934bd4a" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
#include <SPAN style="color: rgb(163, 21, 21);">"FeedData.h"</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>将这些 <CODE>#include</CODE> 指令添加到 app.xaml.cpp：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_a44bb691-7ab5-450c-b1ce-4b915306c127');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_a44bb691-7ab5-450c-b1ce-4b915306c127" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

#include <SPAN style="color: rgb(163, 21, 21);">"ItemsPage.xaml.h"</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>在 app.xaml &lt;ResourceDictionary&gt; 节点中添加以下 XAML 元素。请注意，我们将在 XAML 
  中以声明方式实例化 FeedDataSource。构造应用类时将构造它（我们甚至从未显式调用其构造函数）：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_741f4adb-68d3-4f4a-bc7c-6c88d3c3b45c');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_741f4adb-68d3-4f4a-bc7c-6c88d3c3b45c" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

 <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">local</SPAN><SPAN style="color: blue;">:</SPAN><SPAN style="color: rgb(163, 21, 21);">FeedDataSource</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">feedDataSource</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>现在按 <STRONG>Ctrl-Shift-B</STRONG> 可构建应用。该过程应编译且没有错误或警告。</LI></OL>
<H4><A id="________IValueConverter__"></A><A 
id="________ivalueconverter__"></A><A id="________IVALUECONVERTER__"></A>更适用于日期的 
<STRONG>IValueConverter</STRONG> 类</H4>
<P>现在正是修改 <STRONG>DateConverter</STRONG> 
类的好时机，使之能够分别返回日期、月份和年份，而非将其作为一个字符串返回。在稍后为网格项和列表视图项定义的新风格中，我们需要利用这项功能。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>修改 <STRONG>DateConverter</STRONG> 类</STRONG></P>
<OL>
  <LI>
  <P>在 DateConverter.h 中，使用以下新实现替换现有的 <STRONG>DateConverter</STRONG> 类：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_02d12521-f9d9-46aa-91e3-e1f5f49b297b');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_02d12521-f9d9-46aa-91e3-e1f5f49b297b" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: green;">//DateConverter.h</SPAN>

<SPAN style="color: blue;">#pragma</SPAN> once

<SPAN style="color: blue;">namespace</SPAN> SimpleBlogReader
{

<SPAN style="color: blue;">public</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">class</SPAN> DateConverter <SPAN style="color: blue;">sealed</SPAN> : <SPAN style="color: blue;">public</SPAN> Windows::UI::Xaml::Data::IValueConverter  
{
    <SPAN style="color: blue;">public</SPAN>:
    <SPAN style="color: blue;">virtual</SPAN> Platform::Object^ Convert(Platform::Object^ value,
                                      Windows::UI::Xaml::Interop::TypeName targetType,
                                      Platform::Object^ parameter,
                                      Platform::String^ language)
    {		
        <SPAN style="color: blue;">if</SPAN>(value == nullptr)
        {
            <SPAN style="color: blue;">throw</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Platform::InvalidArgumentException();
        }
        Windows::Foundation::DateTime dt = (Windows::Foundation::DateTime) value;
        Platform::String^ param = safe_cast&lt;Platform::String^&gt;(parameter);
        Platform::String^ result;
        <SPAN style="color: blue;">if</SPAN>(param == nullptr)
		  {
            Windows::Globalization::DateTimeFormatting::DateTimeFormatter^ dtf =
            Windows::Globalization::DateTimeFormatting::DateTimeFormatter::ShortDate::<SPAN style="color: blue;">get</SPAN>();
            result = dtf-&gt;Format(dt);
        }
        <SPAN style="color: blue;">else</SPAN> <SPAN style="color: blue;">if</SPAN>(wcscmp(param-&gt;Data(), L<SPAN style="color: rgb(163, 21, 21);">"month"</SPAN>) == 0)
        {
            Windows::Globalization::DateTimeFormatting::DateTimeFormatter^ month = 
                <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Windows::Globalization::DateTimeFormatting::DateTimeFormatter(<SPAN style="color: rgb(163, 21, 21);">"{month.abbreviated(3)}"</SPAN>);
            result = month-&gt;Format(dt);
        }
        <SPAN style="color: blue;">else</SPAN> <SPAN style="color: blue;">if</SPAN>(wcscmp(param-&gt;Data(), L<SPAN style="color: rgb(163, 21, 21);">"day"</SPAN>) == 0)
        {
            Windows::Globalization::DateTimeFormatting::DateTimeFormatter^ month = 
               <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Windows::Globalization::DateTimeFormatting::DateTimeFormatter(<SPAN style="color: rgb(163, 21, 21);">"{day.integer(2)}"</SPAN>);
            result = month-&gt;Format(dt);
        }
        <SPAN style="color: blue;">else</SPAN> <SPAN style="color: blue;">if</SPAN>(wcscmp(param-&gt;Data(), L<SPAN style="color: rgb(163, 21, 21);">"year"</SPAN>) == 0)
        {
            Windows::Globalization::DateTimeFormatting::DateTimeFormatter^ month = 
                <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Windows::Globalization::DateTimeFormatting::DateTimeFormatter(<SPAN style="color: rgb(163, 21, 21);">"{year.full}"</SPAN>);
				        result = month-&gt;Format(dt);
        }
        <SPAN style="color: blue;">else</SPAN>
        {
            <SPAN style="color: green;">// We don't handle other format types currently.</SPAN>
            <SPAN style="color: blue;">throw</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Platform::InvalidArgumentException();
        }

        <SPAN style="color: blue;">return</SPAN> result; 
     }

    <SPAN style="color: blue;">virtual</SPAN> Platform::Object^ ConvertBack(Platform::Object^ value,
                                          Windows::UI::Xaml::Interop::TypeName targetType,
                                          Platform::Object^ parameter,
                                          Platform::String^ language)
    {   
        <SPAN style="color: green;">// Not needed in SimpleBlogReader. Left as an exercise.</SPAN>
        <SPAN style="color: blue;">throw</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Platform::NotImplementedException();
    }
};
}

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>为了使用这个类，我们在 App.xaml 的 ResourceDictionary 节点中，紧接 FeedDataSource 
  标记之后添加一个对此类的引用。这会导致创建应用时　DateConverter　被实例化。 
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_1dbc2fec-e4db-4078-8e96-636f948a233e');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_1dbc2fec-e4db-4078-8e96-636f948a233e" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">local</SPAN><SPAN style="color: blue;">:</SPAN><SPAN style="color: rgb(163, 21, 21);">DateConverter</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">dateConverter</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI></OL>
<H4><A id="navigating_between_pages"></A><A 
id="NAVIGATING_BETWEEN_PAGES"></A>在页面之间导航</H4>
<P>Metro 
风格应用中的主要活动之一就是在页面之间导航。用户既可以选择“前进”或“后退”按钮，以在页面之间来回移动，也可以选择某个项打开其他页面，例如显示该项的详细信息。 
下面介绍 SimpleBlogReader　的导航设计： </P>
<UL>
  <LI>
  <P>当应用启动时，这些项的页面将显示博客源（DataFeed 对象）的网格。但是，只会显示博客标题、最后发表文章的日期及相应的描述（如果存在）。
   用户选择某个源后，应用将导航到 SplitPage。</P></LI>
  <LI>
  <P>在横向模式下，SplitPage 将文章（FeedItem 
  对象）列表显示在左侧，而将当前选择的文章预览显示在右侧。在纵向视图或辅屏视图中，SplitPage 并不同时显示该列表和预览，只显示其中一个。
   当用户在该列表中选择其他项时，预览将发生更改。 </P></LI>
  <LI>
  <P>SplitPage 包含一个应用栏，用户可以通过从屏幕顶部轻扫或右键单击鼠标调用此应用栏。 此应用栏中有一个按钮；用户选择该按钮后，应用将导航到 
  DetailPage，它以完整网页的形式显示博客文章。 </P></LI>
  <LI>
  <P>用户可以在 DetailPage 中选择“后退”按钮返回 SplitPage，也可以在 SplitPage 中选择“后退”按钮返回 
  ItemsPage。</P></LI></UL>
<P></P>
<P>具体而言，我们每次加载页面时，都必须考虑两种视图状态：纵向模式、辅屏视图、填充视图或横向模式，而且还必须考虑是通过用户操作（前进或后退）还是通过系统恢复（系统在过去某个时刻终止应用后将其恢复）来调用导航。 
 </P>
<P>幸好这些页面本身以及它们的基类 LayoutAwarePage　为我们提供了处理视图状态所需的大部分代码。 而　SuspensionManager 
类则提供了许多在应用挂起和终止时用于保存和还原页面状态的代码。但是，是否实现加载或重新加载页面所需的特定逻辑由我们自己决定。 </P>
<P>XAMLUI 框架提供内置的导航模型，该模型使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.frame.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Frames</STRONG></A> 和 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.page.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Pages</STRONG></A>，并且其工作方式与在 Web 
浏览器中的导航十分类似。<STRONG>Frame</STRONG> 控件可托管 
<STRONG>Pages</STRONG>，并且包含导航历史记录，你可以通过该历史记录在访问过的页面中前进和后退。在导航时，你可以在页面之间传递数据。</P>
<P>应用启动时，随即开始导航。支持导航的基础结构位于 App 类中。在 Visual Studio 项目模板中，一个名为 
<STRONG>rootFrame</STRONG> 的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.frame.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Frame</STRONG></A> 被设为应用窗口的内容。我们来看一下 
App.xaml.cpp 中的默认代码。请注意，设置 <STRONG>rootFrame</STRONG> 
后，应用会检查它当前的状态，因为它可能正从关闭状态启动或正从挂起状态恢复，并且已经将自己的内容存储在内存中。如果它正从终止状态启动，则必须加载终止时所保存的状态。对上述各种情况进行处理之后，应用将导航到第一个窗口。</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_691e601b-c2e4-48ad-8580-ed5de17a85fe');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_691e601b-c2e4-48ad-8580-ed5de17a85fe" 
dir="ltr">
<DIV style="color: black;">
<PRE>

<SPAN style="color: green;">// Default implementation. Not to be pasted into BlogReader.</SPAN>
 
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;summary&gt;</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> Invoked when the app is started normally. Other entry points</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> are used when the app is started to open a specific file, to display</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> search results, and so forth.</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;/summary&gt;</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;param name="args"&gt;</SPAN><SPAN style="color: green;">Details about the launch request and process.&lt;/param&gt;</SPAN>
<SPAN style="color: blue;">void</SPAN> App::OnLaunched(Windows::ApplicationModel::Activation::LaunchActivatedEventArgs^ args)
{
    auto rootFrame = dynamic_cast&lt;Frame^&gt;(Window::Current-&gt;Content);

    <SPAN style="color: green;">// Do not repeat app initialization when Window already has content,</SPAN>
    <SPAN style="color: green;">// just ensure that the window is active.</SPAN>
    <SPAN style="color: blue;">if</SPAN> (rootFrame == nullptr)
    {
        <SPAN style="color: green;">// Create a Frame to act as the navigation context and associate it with</SPAN>
        <SPAN style="color: green;">// a SuspensionManager key.</SPAN>
        rootFrame = <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> Frame();

        <SPAN style="color: blue;">if</SPAN> (args-&gt;PreviousExecutionState == ApplicationExecutionState::Terminated)
        {
            <SPAN style="color: green;">// TODO: Restore the saved session state only when appropriate, and schedule the</SPAN>
            <SPAN style="color: green;">// final launch steps after the restore is complete.</SPAN>

        }

        <SPAN style="color: blue;">if</SPAN> (rootFrame-&gt;Content == nullptr)
        {
            <SPAN style="color: green;">// When the navigation stack isn't restored, navigate to the first page and</SPAN>
            <SPAN style="color: green;">// configure the new page by passing required information as a navigation</SPAN>
            <SPAN style="color: green;">// parameter.</SPAN>
            <SPAN style="color: blue;">if</SPAN> (!rootFrame-&gt;Navigate(TypeName(MainPage::typeid), args-&gt;Arguments))
            {
                <SPAN style="color: blue;">throw</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> FailureException(<SPAN style="color: rgb(163, 21, 21);">"Failed to create initial page"</SPAN>);
            }
        }
        <SPAN style="color: green;">// Put the frame in the current window.</SPAN>
        Window::Current-&gt;Content = rootFrame;
        <SPAN style="color: green;">// Ensure that the current window is active.</SPAN>
        Window::Current-&gt;Activate();
    }
    <SPAN style="color: blue;">else</SPAN>
    {
        <SPAN style="color: blue;">if</SPAN> (rootFrame-&gt;Content == nullptr)
        {
            <SPAN style="color: green;">// When the navigation stack isn't restored, navigate to the first page and</SPAN>
            <SPAN style="color: green;">// configure the new page by passing required information as a navigation</SPAN>
            <SPAN style="color: green;">// parameter.</SPAN>
            <SPAN style="color: blue;">if</SPAN> (!rootFrame-&gt;Navigate(TypeName(ItemsPage::typeid), args-&gt;Arguments))
            {
                <SPAN style="color: blue;">throw</SPAN> <SPAN style="color: blue;">ref</SPAN> <SPAN style="color: blue;">new</SPAN> FailureException(<SPAN style="color: rgb(163, 21, 21);">"Failed to create initial page"</SPAN>);
            }
        }
        <SPAN style="color: green;">// Ensure that the current window is active.</SPAN>
        Window::Current-&gt;Activate();
    }
}


</PRE></DIV></DIV></DIV></DIV>
<P>若要启用在页面之间导航，请使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.frame.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Frame</STRONG></A> 控件的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.frame.navigate.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Navigate</STRONG></A>、<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.frame.goforward.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">GoForward</STRONG></A> 和 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.frame.goback.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">GoBack</STRONG></A> 方法。通过使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh702394.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Navigate(TypeName, Object)</STRONG></A> 
方法，我们不但能够导航到新页面，而且还能在导航的同时向新页面传递数据。第一个参数是我们将导航到的页面的 
<STRONG>TypeName</STRONG>。我们使用静态 <STRONG>typeid</STRONG> 运算符来获取类型的 
<STRONG>TypeName</STRONG>。在这种情况下，我们希望导航到 ItemsPage，将其作为用户在启动或恢复应用时遇到的第一个页面。</P>
<P>第二个参数是我们传递给将要导航到的页面的数据对象。在该页面中，此参数将传递到 <EM>navigationParameter</EM> 参数中的 
LoadState 
方法。在之前的单页版应用中，我们仅显示一个博客源，因此我们传递了博客源集合中的第一个源。在这个新版应用中，我们会受到更多的约束，因为我们必须支持进程周期管理 
(PLM)，但是我们不希望写入任何自定义的序列化代码。所生成代码中的 PLM 功能将自动尝试保存传递到 <EM>navigationParameter</EM> 
中的对象，但是如果我们不提供其他帮助，则只有该类型属于 String、Guid 或基元类型时此过程才能顺利完成。因此，我们不会传递整个 FeedData 
对象，但是我们可以传递一个字符串，并将其作为查找特定 FeedData 或 FeedItem 对象的关键字。这就是 
<STRONG>FeedDataSource</STRONG> 类中　<STRONG>GetFeedAsync</STRONG> 和 
<STRONG>GetFeedItem</STRONG> 方法的用途。本文后续部分会详细介绍这些方法。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" xmlns=""><STRONG>从 
App 类导航到项页面</STRONG></P>
<UL>
  <LI>
  <P>在 App.xaml.cpp 中，向 <STRONG>App::OnLaunched</STRONG> 
  方法实现中添加以下代码。此代码检索应用的数据模型字典中存储的 FeedDataSource 对象，并将该对象传递到项页面。将此代码粘贴到 
  <CODE>rootFrame = ref new Frame();</CODE>　前面或后面。如果 <CODE>rootFrame == 
  nullptr</CODE>，则表示我们必须重新下载所有的 FeedData 
  对象，因为应用已被系统终止或被用户关闭。除此情况之外，这些数据仍然保存在内存中。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_f1a1da40-655b-43b7-a6ef-74748b73d124');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_f1a1da40-655b-43b7-a6ef-74748b73d124" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>


    FeedDataSource^ feedDataSource = safe_cast&lt;FeedDataSource^&gt;(App::Current-&gt;Resources-&gt;Lookup(<SPAN style="color: rgb(163, 21, 21);">"feedDataSource"</SPAN>));
    <SPAN style="color: blue;">if</SPAN> (feedDataSource-&gt;Feeds-&gt;Size == 0)
    {
        feedDataSource-&gt;InitDataSource();
    }


</PRE></DIV></DIV></DIV></DIV>
  <P>在 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.application.onlaunched.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">App::OnLaunched</STRONG></A> 中调用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.frame.navigate.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">Navigate</STRONG></A> 方法时，它最终将导致调用 
  <STRONG>ItemsPage::LoadState</STRONG> 事件处理程序。  如上所述，我们不能使用 
  <EM>navigationParameter</EM> 传递 feedDataSource 对象或甚至 Feeds 
  属性，因为我们不希望必须由自己将它序列化。因此，我们将 feedDataSource 引用以资源的形式存储在 App.xaml 中，这样我们只在 
  App.xaml 中访问它即可。但是，我们仍然需要使用 Feeds 属性初始化 ItemsPage 的 DefaultViewModel。在这里，Feeds 
  Vector 与一个名为“Items”的键相关联，并插入到　ItemsPage　的 <STRONG>DefaultViewModel</STRONG> 
  成员中。DefaultViewModel 是一个 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/br226050.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">Windows::Foundation::Collections::IObservableMap</STRONG></A>。 
  每个页面都有自己的 <STRONG>DefaultViewModel</STRONG>。用一些数据初始化 DefaultViewModel 
  后，<STRONG>ItemsViewSource::View</STRONG> 属性将指向你的数据。如果集合中的元素可以绑定，则这些项将显示在 
  UI　中。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C#</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_7122f0a5-5151-405e-a005-812b468cf0c4');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_7122f0a5-5151-405e-a005-812b468cf0c4" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">void</SPAN> ItemsPage::LoadState(Object^ navigationParameter, IMap&lt;String^, Object^&gt;^ pageState)
{
    <SPAN style="color: green;">// This is the first page to load on startup. The feedDataSource was constructed when the app loaded</SPAN>
    <SPAN style="color: green;">// in response to this declaration in app.xaml: &lt;local:FeedDataSource x:Key="feedDataSource" /&gt;</SPAN>
    <SPAN style="color: green;">// and was initialized aynchronously in the OnLaunched event handler in app.xaml.cpp. </SPAN>
    <SPAN style="color: green;">// Initialization might still be happening, but that's ok. </SPAN>
    FeedDataSource^ feedDataSource = safe_cast&lt;FeedDataSource^&gt;(App::Current-&gt;Resources-&gt;Lookup(<SPAN style="color: rgb(163, 21, 21);">"feedDataSource"</SPAN>));

    <SPAN style="color: green;">// In ItemsPage.xaml (and every other page), the DefaultViewModel is set as DataContext:</SPAN>
    <SPAN style="color: green;">// DataContext="{Binding DefaultViewModel, RelativeSource={RelativeSource Self}}"</SPAN>
    <SPAN style="color: green;">// Because ItemsPage displays a collection of feeds, we set the Items element</SPAN>
    <SPAN style="color: green;">// to the FeedDataSource::Feeds collection. By comparison, the SplitPage sets this element to </SPAN>
    <SPAN style="color: green;">// the Items collection of one FeedData object.</SPAN>
    <SPAN style="color: blue;">this</SPAN>-&gt;DefaultViewModel-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"Items"</SPAN>, feedDataSource-&gt;Feeds);

}

</PRE></DIV></DIV></DIV></DIV></LI></UL>
<P>现在，按 F5 运行包含此修改的应用。请注意，尽管尚未对模板代码进行任何更改，但我们传递给 ItemsPage 
的部分数据已经显示在网格区域中。该页面如下所示，但项目的排列方式可能会根据屏幕分辨率而不同：</P><IMG title="项页    " id="xaml_ItemsPage1" 
alt="项页    " src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC600948.png" 
xmlns="">
<P>在 ItemsPage 中唯一需要做的就是，通知 ItemsPage 在用户选择其中一个项时所要执行的操作。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>从项页面导航到拆分页面</STRONG></P>
<OL>
  <LI>
  <P>用户从 ItemsPage 集合中选取一个博客后，我们将从项页导航到拆分页。要启用此导航，我们希望 <STRONG>GridView</STRONG> 
  项目的行为类似于按钮，而不是类似于所选择的项目。为了使 <STRONG>GridView</STRONG> 项目像按钮一样响应，我们对 
  <STRONG>SelectionMode</STRONG> 和 <STRONG>IsItemClickEnabled</STRONG> 
  属性进行了设置，如下一个示例所示。然后为 <STRONG>GridView</STRONG> 的 <STRONG>ItemClicked</STRONG> 
  事件添加了一个处理程序。在 ItemsPage.xaml 中查找 <CODE>itemGridView</CODE> 
元素，并使用下列标记替换该元素：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_19963127-1dad-4f38-8d91-475481346cec');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_19963127-1dad-4f38-8d91-475481346cec" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

 <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">GridView</SPAN>
            <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemGridView</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">AutomationProperties.AutomationId</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemsGridView</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">AutomationProperties.Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Items</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">TabIndex</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">Grid.RowSpan</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">2</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">Padding</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">116,136,116,46</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">ItemsSource</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Source={StaticResource itemsViewSource}}</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">ItemTemplate</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource Standard250x250ItemTemplate}</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">SelectionMode</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">None</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">IsItemClickEnabled</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">true</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">IsSwipeEnabled</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">false</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">ItemClick</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemView_ItemClick</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>项页还包含一个 <STRONG>itemListView</STRONG> 列表视图，如果铺屏应用，则会显示该列表视图来代替网格。我们将在<A 
  href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045.aspx#adapting_to_different_layouts">适应不同的布局</A>部分中对此进行更详细的介绍。目前，我们只需要对 
  <STRONG>ListView</STRONG> 和 <STRONG>GridView</STRONG> 进行相同的更改，就可以确保它们的行为相同。在 
  ItemsPage.xaml 中找到 <STRONG>itemListView</STRONG> 并添加所需的属性，以使其如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_7f57f5d1-917e-41ec-9eaa-2d64b53b06f1');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_7f57f5d1-917e-41ec-9eaa-2d64b53b06f1" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN>
            <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemListView</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">AutomationProperties.AutomationId</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemsListView</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">AutomationProperties.Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Items</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">TabIndex</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">Visibility</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Collapsed</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0,-10,0,0</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">Padding</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">10,0,0,60</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">ItemsSource</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Source={StaticResource itemsViewSource}}</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">ItemTemplate</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource Standard80ItemTemplate}</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">SelectionMode</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">None</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">IsSwipeEnabled</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">false</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">IsItemClickEnabled</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">true</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">ItemClick</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemView_ItemClick</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>将这些指令添加到 ItemsPage.xaml.cpp：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_25ea2509-3287-4404-ac57-30702d4d1567');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_25ea2509-3287-4404-ac57-30702d4d1567" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
#include <SPAN style="color: rgb(163, 21, 21);">"SplitPage.xaml.h"</SPAN>
<SPAN style="color: green;">//...</SPAN>
<SPAN style="color: blue;">using</SPAN> <SPAN style="color: blue;">namespace</SPAN> Windows::UI::Xaml::Interop;


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>将事件处理程序原型添加到 ItemsPage.xaml.h，并将实现添加到 ItemsPage.xaml.cpp：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_874c4500-f9c1-4972-9cd5-d81f72a51498');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_874c4500-f9c1-4972-9cd5-d81f72a51498" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: green;">//ItemsPage.xaml.h:</SPAN>
<SPAN style="color: blue;">protected</SPAN>: 
<SPAN style="color: blue;">virtual</SPAN> <SPAN style="color: blue;">void</SPAN> ItemView_ItemClick(Platform::Object^ sender, Windows::UI::Xaml::Controls::ItemClickEventArgs^ e);


<SPAN style="color: green;">//ItemsPage.xaml.cpp:</SPAN>
<SPAN style="color: blue;">void</SPAN> ItemsPage::ItemView_ItemClick(Object^ sender, ItemClickEventArgs^ e)
{
    <SPAN style="color: green;">// We must manually cast from Object^ to FeedData^.</SPAN>
    auto feedData = safe_cast&lt;FeedData^&gt;(e-&gt;ClickedItem);

    <SPAN style="color: green;">// Store the current URI so that we can look up the</SPAN>
    <SPAN style="color: green;">// correct feedData object on resume.</SPAN>
    App::Current-&gt;Resources-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"CurrentFeed"</SPAN>, feedData);
      
    <SPAN style="color: green;">// Navigate to SplitPage and pass the title of the selected feed.</SPAN>
    <SPAN style="color: green;">// SplitPage will receive this in its LoadState method in the navigationParamter.</SPAN>
    <SPAN style="color: blue;">this</SPAN>-&gt;Frame-&gt;Navigate(TypeName(SplitPage::typeid), feedData-&gt;Title);
}

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>将这个正在使用的指令添加到 SplitPage.xaml.cpp：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_de5c526d-3360-4a72-b734-ac4f3d9a9ffe');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_de5c526d-3360-4a72-b734-ac4f3d9a9ffe" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">using</SPAN> <SPAN style="color: blue;">namespace</SPAN> concurrency;

</PRE></DIV></DIV></DIV></DIV>
  <P>并发命名空间的头文件是 &lt;ppltasks.h&gt;，并且该文件已包含在我们的本地 pch.h 文件中。</P></LI>
  <LI>
  <P>ItemsPage 导航到 SplitView 后将导致调用 <STRONG>SplitView::LoadState</STRONG> 方法。在 
  ItemsPage 中，LoadState 需要确定如何导航到自身以及应用的上一状态。下一示例中的代码注释将提供更多详细信息；你可以通过查看 
  <STRONG>App::OnLaunched</STRONG> 和 <STRONG>ItemsPage::LoadState</STRONG> 
  了解其中的许多信息。现在打开 SplitPage.xaml.cpp，然后使用此代码替换整个方法：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_650908fc-97f6-4c57-bed7-2001bac092eb');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_650908fc-97f6-4c57-bed7-2001bac092eb" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;summary&gt;</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> Populates the page with content that's passed during navigation.  Any saved state is also</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> provided when a page is recreated from a prior session.</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;/summary&gt;</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;param name="navigationParameter"&gt;</SPAN><SPAN style="color: green;">The parameter value that was passed to</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> &lt;see cref="Frame::Navigate(Type, Object)"/&gt; when this page was initially requested.</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;/param&gt;</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;param name="pageState"&gt;</SPAN><SPAN style="color: green;">A map of state that was preserved by this page during an earlier</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> session.  This is null the first time that a page is visited.&lt;/param&gt;</SPAN>
<SPAN style="color: blue;">void</SPAN> SplitPage::LoadState(Object^ navigationParameter, IMap&lt;String^, Object^&gt;^ pageState)
{
    <SPAN style="color: green;">// If we are navigating forward from ItemsPage, there is no existing page state.</SPAN>
    <SPAN style="color: blue;">if</SPAN> (pageState == nullptr)
    {
        <SPAN style="color: green;">// Current feed was set in the click event in ItemsPage. We don't pass it in</SPAN>
        <SPAN style="color: green;">// through navigationParameter because on suspension, the default serialization </SPAN>
        <SPAN style="color: green;">// mechanism will try to store that value but fail because it can only handle </SPAN>
        <SPAN style="color: green;">// primitives, strings, and Guids.</SPAN>
        auto fd = safe_cast&lt;FeedData^&gt;(App::Current-&gt;Resources-&gt;Lookup(<SPAN style="color: rgb(163, 21, 21);">"CurrentFeed"</SPAN>));

        <SPAN style="color: green;">// Insert into the ViewModel for this page to initialize itemsViewSource-&gt;View</SPAN>
        <SPAN style="color: blue;">this</SPAN>-&gt;DefaultViewModel-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"Feed"</SPAN>, fd);
        <SPAN style="color: blue;">this</SPAN>-&gt;DefaultViewModel-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"Items"</SPAN>, fd-&gt;Items);

        <SPAN style="color: green;">// When this is a new page, select the first item automatically unless logical page</SPAN>
        <SPAN style="color: green;">// navigation is being used (see the logical page navigation #region below).</SPAN>
        <SPAN style="color: blue;">if</SPAN> (!UsingLogicalPageNavigation() &amp;&amp; itemsViewSource-&gt;View != nullptr)
        {
            <SPAN style="color: blue;">this</SPAN>-&gt;itemsViewSource-&gt;View-&gt;MoveCurrentToFirst();
        }
        <SPAN style="color: blue;">else</SPAN>
        {
            <SPAN style="color: blue;">this</SPAN>-&gt;itemsViewSource-&gt;View-&gt;MoveCurrentToPosition(-1);
        }
    }

    <SPAN style="color: green;">// pageState != null means either (1) we are returning from DetailPage</SPAN>
    <SPAN style="color: green;">// or (2) we are resuming from termination. If (1), then we still have our</SPAN>
    <SPAN style="color: green;">// state and don't have to do anything. If (2), then we have to restore the page.</SPAN>
    <SPAN style="color: blue;">else</SPAN> <SPAN style="color: blue;">if</SPAN> (!<SPAN style="color: blue;">this</SPAN>-&gt;DefaultViewModel-&gt;HasKey(<SPAN style="color: rgb(163, 21, 21);">"Feed"</SPAN>))
    {   
        <SPAN style="color: green;">// All we stored is the Uri string for the feed, not the object. </SPAN>
        String^ uri = safe_cast&lt;String^&gt;(pageState-&gt;Lookup(<SPAN style="color: rgb(163, 21, 21);">"Uri"</SPAN>));

        <SPAN style="color: green;">// FeedDataSource::InitDataSource has already been called. </SPAN>
        <SPAN style="color: green;">// It's an asynchronous operation, so our FeedData might not</SPAN>
        <SPAN style="color: green;">// be available yet. GetFeedAsync uses a task_completion_event to  </SPAN>
        <SPAN style="color: green;">// wait (on its own thread) until the specified FeedData is available.</SPAN>
        <SPAN style="color: green;">// The next three methods follow the basic async pattern in C++:</SPAN>
        <SPAN style="color: green;">// 1. Call the async method.</SPAN>
        auto feedDataOp = FeedDataSource::GetFeedAsync(uri);

        <SPAN style="color: green;">// 2. Create a task from it.</SPAN>
        auto feedDataTask = create_task(feedDataOp);

        <SPAN style="color: green;">// 3. Define the work to be performed after the task completes.</SPAN>
        feedDataTask.then([<SPAN style="color: blue;">this</SPAN>, pageState](FeedData^ feedData)
        {
            <SPAN style="color: green;">// Now we have the feedData, so it's safe to get the FeedItem</SPAN>
            <SPAN style="color: green;">// synchronously. Inserting into DefaultViewModel</SPAN>
            <SPAN style="color: green;">// initializes the itemsViewSource-View object.</SPAN>
            <SPAN style="color: blue;">this</SPAN>-&gt;DefaultViewModel-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"Feed"</SPAN>, feedData);
            <SPAN style="color: blue;">this</SPAN>-&gt;DefaultViewModel-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"Items"</SPAN>, feedData-&gt;Items);

            <SPAN style="color: green;">// DetailsPage has to get the new Uri from this value.</SPAN>
            App::Current-&gt;Resources-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"CurrentFeed"</SPAN>, feedData);

            <SPAN style="color: green;">// Now that we have a FeedData^, we can call GetFeedItem safely and</SPAN>
            <SPAN style="color: green;">// pass in the title that we stored before the app was terminated.</SPAN>
            String^ itemTitle = safe_cast&lt;String^&gt;(pageState-&gt;Lookup(<SPAN style="color: rgb(163, 21, 21);">"SelectedItem"</SPAN>));
            auto selectedItem = FeedDataSource::GetFeedItem(feedData, itemTitle);

            <SPAN style="color: blue;">if</SPAN> (selectedItem != nullptr)
            {
                <SPAN style="color: blue;">this</SPAN>-&gt;itemsViewSource-&gt;View-&gt;MoveCurrentTo(selectedItem);
            }
        });
    }
}


</PRE></DIV></DIV></DIV></DIV>
  <P>从终止状态恢复后，我们没有 FeedItem 对象，只有一个字符串。因此，我们必须根据该字符串查找 
  FeedItem。但是，这个查找的过程比较复杂，我们必须等待 FeedDataSource 完成 FeedItem 
  下载。而且，我们不希望等到所有源都下载完，只希望等到所需的源可以使用时即可。此处及 
  <STRONG>FeedDataSource::GetFeedAsync</STRONG> 方法中将发生整个同步过程。拥有 FeedData 
  对象后，我们可以同步调用 GetFeedItem 方法，以获取所选文章的 FeedItem，这样我们就能够填充预览窗格。</P>
  <P class="note"><STRONG>注意</STRONG>&nbsp;&nbsp;我们将 <STRONG>Items</STRONG> 
  属性单独插入到 SplitPage 的 <STRONG>DefaultViewModel</STRONG> 中，使这些项处于可访问状态，以便进行 XAML 
  数据绑定。</P>
  <P>导航返回项页不需要执行其他操作。模板包含处理 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.primitives.buttonbase.click.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">BackButton.Click</STRONG></A> 事件和调用 <A 
  href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.frame.goback.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">Frame.GoBack</STRONG></A> 方法的代码。</P></LI>
  <LI>
  <P>在此时运行应用时，请注意详细信息窗格中的博客文本将显示原始 HTML。若要解决此问题，我们必须更改选定博客文章的标题和内容所使用的布局。  
  如果应用正在运行，请按 <STRONG>F12</STRONG> 中断应用，移动切换对话框，然后按 <STRONG>Shift-F5</STRONG> 
  停止调试并返回到 Visual Studio 代码编辑器。</P></LI></OL>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>实现 SplitPage::SaveState</STRONG></P>
<UL>
  <LI>
  <P>在 ItemsPage 中，不需要保存页面状态，因为我们总是显示所有项。在 SplitPage 
  中，必须保存当前选择的项，以便应用在终止和恢复时可以恰好从此状态启动。如上所述，因为我们一直使用 SuspensionManager 
  来执行所需的序列化操作，所以我们只能保存字符串和数字，而不能保存 FeedItem 对象。因此，我们保存当前所选项的名称。我们必须既保存 FeedItem 
  的标题，又保存 FeedData 对象的 URI，以便在终止和恢复之后可以再次找到此 FeedItem。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_d73e092b-2c18-4943-a1bd-a6c7f2f9127e');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_d73e092b-2c18-4943-a1bd-a6c7f2f9127e" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;summary&gt;</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> Preserves state that's associated with this page in case the application is suspended or the</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> the page is discarded from the navigation cache.  Values must conform to the serialization</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> requirements of &lt;see cref="SuspensionManager::SessionState"/&gt;.</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;/summary&gt;</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;param name="pageState"&gt;</SPAN><SPAN style="color: green;">An empty map to be populated with serializable state.&lt;/param&gt;</SPAN>
<SPAN style="color: blue;">void</SPAN> SplitPage::SaveState(IMap&lt;String^, Object^&gt;^ pageState)
{
    <SPAN style="color: blue;">if</SPAN> (itemsViewSource-&gt;View != nullptr)
    {
        auto selectedItem = itemsViewSource-&gt;View-&gt;CurrentItem;
        <SPAN style="color: green;">// Derive a serializable navigation parameter and pass it to</SPAN>
        <SPAN style="color: green;">// pageState-&gt;Insert("SelectedItem", &lt;value&gt;).</SPAN>
        <SPAN style="color: blue;">if</SPAN> (selectedItem != nullptr)
        {
            auto feedItem = safe_cast&lt;FeedItem^&gt;(selectedItem);
            String^ itemTitle = feedItem-&gt;Title;
            pageState-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"SelectedItem"</SPAN>, itemTitle);
        }

        <SPAN style="color: green;">// Save the feed title also.</SPAN>
        auto feedData = safe_cast&lt;FeedData^&gt;(<SPAN style="color: blue;">this</SPAN>-&gt;DefaultViewModel-&gt;Lookup(<SPAN style="color: rgb(163, 21, 21);">"Feed"</SPAN>));
        pageState-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"Uri"</SPAN>, feedData-&gt;Uri);
    }
}

</PRE></DIV></DIV></DIV></DIV></LI></UL>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>修改 SplitPage 和 ItemsPage 中的绑定和布局</STRONG></P>
<OL>
  <LI>
  <P>在结束向添加到应用中的新页面添加功能之前，我们还必须进行几项更改。添加此代码之后，即可开始设置样式和动画。</P>
  <P>由于在向 <STRONG>DefaultViewModel</STRONG> 
  中添加数据时使用了名为“Feed”的键，我们必须将页面标题中的绑定更改为绑定到 <STRONG>Feed</STRONG> 
  属性，而不是绑定到“Group”（默认设置）。在 SplitPage.xaml 中，更改名为 <STRONG>pageTitle</STRONG> 的 
  <STRONG>TextBlock</STRONG> 的文本绑定以绑定到 <STRONG>Feed.Title</STRONG>，如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_113c8dc1-21d0-48a6-9185-20373773d01b');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_113c8dc1-21d0-48a6-9185-20373773d01b" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">pageTitle</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Column</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Feed.Title}</SPAN><SPAN style="color: black;">"</SPAN> 
    <SPAN style="color: red;">Style</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource PageHeaderTextStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>同样在 SplitPage.xaml 中，将名为 <STRONG>titlePanel</STRONG> 的 
  <STRONG>Grid</STRONG> 更改为跨 2 个列。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_abd07736-8cfe-42ff-a5c5-9022a218840c');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_abd07736-8cfe-42ff-a5c5-9022a218840c" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: green;">&lt;!-- Back button and page title --&gt;</SPAN>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">titlePanel</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.ColumnSpan</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">2</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>在 ItemsPage.xaml 中，页面标题被绑定到具有键 AppName 的静态资源。将此资源中的文本更新到 Windows 
  团队博客，如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_3e7d29bc-3776-452c-933b-2bc83766f5c0');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_3e7d29bc-3776-452c-933b-2bc83766f5c0" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">x</SPAN><SPAN style="color: blue;">:</SPAN><SPAN style="color: rgb(163, 21, 21);">String</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">AppName</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>Windows Team Blogs<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">x</SPAN><SPAN style="color: blue;">:</SPAN><SPAN style="color: rgb(163, 21, 21);">String</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI></OL>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" xmlns=""><STRONG>向 
SplitPage.xaml 中添加 <STRONG>WebView</STRONG> 控件</STRONG></P>
<OL>
  <LI>
  <P>在 SplitPage.xaml 中，我们必须更改用于显示选定博客文章的标题和内容的布局。要执行此操作，请将名为 
  <STRONG>itemDetail</STRONG> 的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.scrollviewer.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">ScrollViewer</STRONG></A> 替换为下列 
  <STRONG>ScrollViewer</STRONG> 布局。你应该已经认识到此 XAML 的大部分来源于我们之前在 MainPage.xaml 
  中进行的工作。本文章的后续内容中将介绍 <STRONG>Rectangle</STRONG> 元素的用途。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_f52cda93-374c-46e1-bc23-5b0c384e4a65');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_f52cda93-374c-46e1-bc23-5b0c384e4a65" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: green;">&lt;!-- Details for selected item --&gt;</SPAN>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ScrollViewer</SPAN>
    <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemDetail</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">AutomationProperties.AutomationId</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemDetailScrollViewer</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Grid.Column</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Padding</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">70,0,120,0</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">DataContext</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding SelectedItem, ElementName=itemListView}</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Style</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource VerticalScrollViewerStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>

    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemDetailGrid</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">RowDefinition</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">*</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.RowDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>

        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemTitle</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Title}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Style</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource SubheaderTextStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Border</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">contentViewBorder</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">BorderBrush</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Gray</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">BorderThickness</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">2</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0,15,0,20</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">WebView</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">contentView</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Rectangle</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">contentViewRect</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>    
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Border</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ScrollViewer</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>在 SplitPage.xaml.cpp 中，修改当 <STRONG>ListView</STRONG> 选项更改时导致 
  <STRONG>WebView</STRONG> 
  更新的事件处理代码。<STRONG>ItemListView_SelectionChanged</STRONG> 
  函数签名和实现已经具备。我们只需要将这些行添加到方法末尾即可：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_e018a1e0-0cc0-4d37-bda5-d60f3d232430');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_e018a1e0-0cc0-4d37-bda5-d60f3d232430" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

    <SPAN style="color: green;">// Sometimes there is no selected item, e.g. when navigating back</SPAN>
    <SPAN style="color: green;">// from detail in logical page navigation.</SPAN>
    auto fi = dynamic_cast&lt;FeedItem^&gt;(itemListView-&gt;SelectedItem);
    <SPAN style="color: blue;">if</SPAN>(fi != nullptr)
    {
        contentView-&gt;NavigateToString(fi-&gt;Content);
    }    


</PRE></DIV></DIV></DIV></DIV></LI></OL>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" xmlns=""><STRONG>向 
DetailPage.xaml 中添加 <STRONG>WebView</STRONG> 控件</STRONG></P>
<UL>
  <LI>
  <P>在 DetailPage.xaml 中，我们必须将标题文本绑定到博客文章标题，并添加一个 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.webview.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">WebView</STRONG></A> 
  控件来显示博客页面。要执行此操作，请将包含返回按钮和页面标题的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.grid.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">Grid</STRONG></A> 替换为此 
  <STRONG>Grid</STRONG> 和 <STRONG>WebView</STRONG>：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_9e00bf3d-9851-4244-8d3c-5dfe1adf384c');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_9e00bf3d-9851-4244-8d3c-5dfe1adf384c" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: green;">&lt;!-- Back button and page title --&gt;</SPAN>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">*</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Button</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">backButton</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Click</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">GoBack</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">IsEnabled</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Frame.CanGoBack, ElementName=pageRoot}</SPAN><SPAN style="color: black;">"</SPAN>
               <SPAN style="color: red;">Style</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource BackButtonStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">pageTitle</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Column</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> 
               <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Title}</SPAN><SPAN style="color: black;">"</SPAN> 
               <SPAN style="color: red;">Style</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource PageHeaderTextStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Border</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">contentViewBorder</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">BorderBrush</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Gray</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">BorderThickness</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">2</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">120,15,20,20</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">WebView</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">contentView</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Border</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI></UL>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" xmlns=""><STRONG>在 
DetailPage 类中实现 LoadState 和 SaveState</STRONG></P>
<OL>
  <LI>
  <P>将以下专用数据成员添加到 DetailPage.xaml.h 中的 DetailPage 类：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_9f6aa0f2-e89f-4938-8f67-ddbd22ccf66e');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_9f6aa0f2-e89f-4938-8f67-ddbd22ccf66e" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">private</SPAN>:
        Platform::String^ m_itemTitle;
        Platform::String^ m_feedUri;


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>在 DetailPage.xaml.cpp 中，向 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.page.onnavigatedto.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">LoadState</STRONG></A> 
  方法中添加代码以导航到博客文章，并设置页面的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.frameworkelement.datacontext.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">DataContext</STRONG></A>。正如在 SplitPage 
  中一样，我们必须确定应用的上一状态。更新后的方法如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_faf605a3-23da-4703-9f6e-47f18e4432aa');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_faf605a3-23da-4703-9f6e-47f18e4432aa" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;summary&gt;</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> Populates the page with content passed during navigation.  Any saved state is also</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> provided when recreating a page from a prior session.</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;/summary&gt;</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;param name="navigationParameter"&gt;</SPAN><SPAN style="color: green;">The parameter value passed to</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> &lt;see cref="Frame::Navigate(Type, Object)"/&gt; when this page was initially requested.</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;/param&gt;</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;param name="pageState"&gt;</SPAN><SPAN style="color: green;">A map of state preserved by this page during an earlier</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> session.  This will be null the first time a page is visited.&lt;/param&gt;</SPAN>
<SPAN style="color: blue;">void</SPAN> DetailPage::LoadState(Object^ navigationParameter, IMap&lt;String^, Object^&gt;^ pageState)
{
    
    <SPAN style="color: green;">// Lookup the URL for the blog title that was either</SPAN>
    <SPAN style="color: green;">// (a) passed to us in this session or</SPAN>
    <SPAN style="color: green;">// (b) saved in the SaveState method when our app was suspended.</SPAN>
    m_itemTitle = safe_cast&lt;String^&gt;(navigationParameter);

    <SPAN style="color: green;">// We are navigating forward from SplitPage</SPAN>
    <SPAN style="color: blue;">if</SPAN> (pageState == nullptr)
    {
        FeedData^ feedData = safe_cast&lt;FeedData^&gt;(App::Current-&gt;Resources-&gt;Lookup(<SPAN style="color: rgb(163, 21, 21);">"CurrentFeed"</SPAN>));
        m_feedUri = feedData-&gt;Uri;

        auto feedItem = FeedDataSource::GetFeedItem(feedData, m_itemTitle);
        <SPAN style="color: blue;">if</SPAN> (feedItem != nullptr)
        {               
            DefaultViewModel-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"Title"</SPAN>, m_itemTitle);
            <SPAN style="color: green;">// Display the web page.</SPAN>
            contentView-&gt;Navigate(feedItem-&gt;Link);
        }
    }
   
    <SPAN style="color: green;">// We are resuming from suspension:</SPAN>
    <SPAN style="color: blue;">else</SPAN>
    {
        <SPAN style="color: green;">// We are resuming, and might not have our FeedData object yet</SPAN>
        <SPAN style="color: green;">// so must get it asynchronously and wait on the result.</SPAN>
        String^ uri = safe_cast&lt;String^&gt;(pageState-&gt;Lookup(<SPAN style="color: rgb(163, 21, 21);">"FeedUri"</SPAN>));
        auto feedDataOp = FeedDataSource::GetFeedAsync(uri); <SPAN style="color: green;">//URL</SPAN>
        auto feedDataTask = create_task(feedDataOp);

        feedDataTask.then([<SPAN style="color: blue;">this</SPAN>, pageState](FeedData^ feedData)
        {            
            App::Current-&gt;Resources-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"CurrentFeed"</SPAN>, feedData);

            m_feedUri = feedData-&gt;Uri;
            m_itemTitle = safe_cast&lt;String^&gt;(pageState-&gt;Lookup(<SPAN style="color: rgb(163, 21, 21);">"Item"</SPAN>));
            auto feedItem = FeedDataSource::GetFeedItem(feedData, m_itemTitle);

            <SPAN style="color: blue;">if</SPAN> (feedItem != nullptr)
            {               
                DefaultViewModel-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"Title"</SPAN>, m_itemTitle);
                <SPAN style="color: green;">// Display the web page.</SPAN>
                contentView-&gt;Navigate(feedItem-&gt;Link);
            }
        });
    }
}

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>与 LoadState 相反，SaveState 仅包含两行代码。正如在 SplitPage 中一样，我们会保存源的 
  URI，因为在从终止状态恢复时，我们需要在 LoadState 中使用该 URI 来查询 FeedItem。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_59f0a780-c32b-4538-a77f-d3f655db25d9');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_59f0a780-c32b-4538-a77f-d3f655db25d9" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;summary&gt;</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> Preserves state associated with this page in case the application is suspended or the</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> page is discarded from the navigation cache.  Values must conform to the serialization</SPAN>
<SPAN style="color: gray;">///</SPAN><SPAN style="color: green;"> requirements of &lt;see cref="SuspensionManager::SessionState"/&gt;.</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;/summary&gt;</SPAN>
<SPAN style="color: gray;">///</SPAN> <SPAN style="color: gray;">&lt;param name="pageState"&gt;</SPAN><SPAN style="color: green;">An empty map to be populated with serializable state.&lt;/param&gt;</SPAN>
<SPAN style="color: blue;">void</SPAN> DetailPage::SaveState(IMap&lt;String^, Object^&gt;^ pageState)
{
    <SPAN style="color: green;">// Store the itemTitle in case we are suspended or terminated.</SPAN>
    pageState-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"Item"</SPAN>, m_itemTitle);
    pageState-&gt;Insert(<SPAN style="color: rgb(163, 21, 21);">"FeedUri"</SPAN>, m_feedUri);
}


</PRE></DIV></DIV></DIV></DIV></LI></OL>
<H3><A id="adding_an_app_bar"></A><A id="ADDING_AN_APP_BAR"></A>应用栏</H3>
<P>博客阅读器应用中的大部分导航都是在用户从 UI 
中选择某个项目时发生的。但在拆分页面上，我们必须提供一种方法，让用户能转到博客文章的详细信息视图。我们可以在页面上某个位置放置一个按钮，但这将干扰核心应用体验，即阅读。因此，我们将按钮放在一个隐藏的应用栏中，该栏仅在用户需要时显示。 
我们将添加一个应用栏，其中包含一个按钮，用于导航到详细信息页。</P>
<P>应用栏是 UI 
的一部分，默认情况下是隐藏的，可在用户沿屏幕边缘轻扫、与应用互动或者单击鼠标右键时显示或消失。它可以向用户提供导航、命令和工具。应用栏既可以显示在页面顶部或底部，又可以同时显示在顶部和底部。
 我们建议你将导航放在顶部应用栏中，将工具和命令放在底部应用栏中。要在 XAML 中添加应用栏，我们需要将一个 <STRONG>AppBar</STRONG> 
控件指定给 <STRONG>Page</STRONG> 的 <STRONG>TopAppBar</STRONG> 或 
<STRONG>BottomAppBar</STRONG> 属性。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>向拆分页面应用栏中添加按钮</STRONG></P>
<UL>
  <LI>
  <P>StandardStyles.xaml 文件包含适用于常见场景的各种应用栏按钮样式。我们以这些样式为指导为我们的按钮创建样式。我们将样式放在 
  SplitPage.xaml 的 <CODE>Page.Resources</CODE> 部分：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_a541ce9e-8e02-49c1-9d0e-278cf2c3ca9c');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_a541ce9e-8e02-49c1-9d0e-278cf2c3ca9c" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Style</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">WebViewAppBarButtonStyle</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">TargetType</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Button</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">BasedOn</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource AppBarButtonStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter</SPAN> <SPAN style="color: red;">Property</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">AutomationProperties.AutomationId</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">WebViewAppBarButton</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter</SPAN> <SPAN style="color: red;">Property</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">AutomationProperties.Name</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">View Web Page</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter</SPAN> <SPAN style="color: red;">Property</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Content</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&amp;#xE12B;</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Style</SPAN><SPAN style="color: blue;">&gt;</SPAN>



</PRE></DIV></DIV></DIV></DIV>
  <P>接下来，将此代码粘贴到 Page.Resources 节点之后，以创建一个顶部应用栏，其中包含我们刚刚定义的按钮：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_c5455a2e-8530-43e0-bae7-fdb6dc2c511b');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_c5455a2e-8530-43e0-bae7-fdb6dc2c511b" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.TopAppBar</SPAN><SPAN style="color: blue;">&gt;</SPAN>
   <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">AppBar</SPAN> <SPAN style="color: red;">Padding</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">10,0,10,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>            
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Button</SPAN> <SPAN style="color: red;">Click</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ViewDetail_Click</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">HorizontalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Right</SPAN><SPAN style="color: black;">"</SPAN> 
                    <SPAN style="color: red;">Style</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource WebViewAppBarButtonStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">AppBar</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.TopAppBar</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI></UL>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>添加详细信息视图导航</STRONG></P>
<OL>
  <LI>
  <P>将以下方法签名添加到 SplitPage.xaml.h 中的 <STRONG>SplitPage</STRONG> 类：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_42f6ad2c-ddfc-4166-ac93-dd3c06eb2eda');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_42f6ad2c-ddfc-4166-ac93-dd3c06eb2eda" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">void</SPAN> ViewDetail_Click(Platform::Object^ sender, Windows::UI::Xaml::RoutedEventArgs^ e);


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>将以下 <CODE>#include</CODE> 指令和 <CODE>using</CODE> 语句添加到 SplitPage.xaml.cpp 
  中：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_aa4d5356-3eac-4b80-a9b5-e81b0c02cd72');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_aa4d5356-3eac-4b80-a9b5-e81b0c02cd72" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
#include <SPAN style="color: rgb(163, 21, 21);">"DetailPage.xaml.h"</SPAN>
...
<SPAN style="color: blue;">using</SPAN> <SPAN style="color: blue;">namespace</SPAN> Windows::UI::Xaml::Interop;

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>将此方法主体添加到 SplitPage.xaml.cpp 中：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_53c217cd-dc8c-45b0-9784-82efbcf9eda1');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_53c217cd-dc8c-45b0-9784-82efbcf9eda1" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">void</SPAN> SplitPage::ViewDetail_Click(Object^ sender, RoutedEventArgs^ e)
{
    <SPAN style="color: green;">// Navigate to the appropriate destination page, and configure the new page</SPAN>
    <SPAN style="color: green;">// by passing required information as a navigation parameter.</SPAN>

    auto selectedItem = dynamic_cast&lt;FeedItem^&gt;(<SPAN style="color: blue;">this</SPAN>-&gt;itemListView-&gt;SelectedItem);

    <SPAN style="color: green;">// selectedItem will be nullptr if the user invokes the app bar</SPAN>
    <SPAN style="color: green;">// and clicks on "view web page" without selecting an item.</SPAN>
    <SPAN style="color: blue;">if</SPAN> (<SPAN style="color: blue;">this</SPAN>-&gt;Frame != nullptr &amp;&amp; selectedItem != nullptr)
    {
        auto itemTitle = safe_cast&lt;String^&gt;(selectedItem-&gt;Title);
        <SPAN style="color: blue;">this</SPAN>-&gt;Frame-&gt;Navigate(TypeName(DetailPage::typeid), itemTitle);
    }
}


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>此时，基本应用功能已全部完成！尝试构建示例，并在模拟器中运行该示例，以测试纵向和横向模式下页面之间的导航。在 ItemsPage 
  中选择一个项之后，应用应导航到 SplitPage。在 SplitPage 中，可以使用顶部的“后退”按钮返回 
  ItemsPage，或者从屏幕顶部轻扫或右键单击调用应用栏，然后按下或单击应用栏中的按钮返回 DetailPage。DetailPage 
  中有一个“后退”按钮，可以让你返回 SplitPage。当你在 SplitPage 
  中更改选定项时，将出现页面预览（注意横向模式和纵向模式之间的行为差异）。</LI></OL>
<H3><A id="adding_animations_and_transitions"></A><A id="ADDING_ANIMATIONS_AND_TRANSITIONS"></A>添加动画和过渡</H3>
<P>当我们谈论动画时，通常会联想到屏幕上蹦蹦跳跳的物体。但在 XAML 
中，动画实质上只是一种在对象上更改属性值的方法。这让动画具有多种用途，而不仅仅是一堆跳动的球。在我们的博客阅读器应用中，我们使用一些默认动画和转换来使 UI 
适应不同的布局和方向。我们可以在 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.media.animation.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Windows.UI.Xaml.Media.Animation</STRONG></A> 
命名空间中找到它们。</P>
<H4><A id="______"></A>添加主题动画</H4>
<P>“主题动画”<EM></EM>是一个预定义的动画，我们可以将其放在一个 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.media.animation.storyboard.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Storyboard</STRONG></A> 中。<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.media.animation.popinthemeanimation.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">PopInThemeAnimation</STRONG></A> 在页面加载时使 
Web 视图从右向左滑入。增加 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.media.animation.popinthemeanimation.fromhorizontaloffset.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">FromHorizontalOffset</STRONG></A> 
属性的值会使效果更好。在此，我们将 <STRONG>PopInThemeAnimation</STRONG> 放入 
<STRONG>Storyboard</STRONG>，并使其成为 DetailPage.xaml 中的资源。将动画目标设置为环绕 Web 内容的 <A 
href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.border.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Border</STRONG></A>。这样便会使 
<STRONG>Border</STRONG> 和其中的所有内容具有动画效果。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>向详细信息页面添加主题动画</STRONG></P>
<OL>
  <LI>
  <P>将以下 XAML 片段粘贴到 DetailPage.xaml 中的 <CODE>Page.Resources</CODE> 节点：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_c4c266d7-a0cc-4cca-ba3d-dce1c3e4b33e');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_c4c266d7-a0cc-4cca-ba3d-dce1c3e4b33e" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">PopInStoryboard</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">PopInThemeAnimation</SPAN>  <SPAN style="color: red;">Storyboard.TargetName</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">contentViewBorder</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FromHorizontalOffset</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">400</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>将以下代码粘贴到 DetailPage.xaml.cpp 中的 <STRONG>DetailPage::LoadState</STRONG> 
  方法的开头。替代 LoadState 由基类 LayoutAwarePage 中的 OnNavigatedTo 方法调用：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>C++</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_cd471686-b091-465a-a28c-764a29f6f63d');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_cd471686-b091-465a-a28c-764a29f6f63d" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: green;">// Run the PopInThemeAnimation. </SPAN>
Windows::UI::Xaml::Media::Animation::Storyboard^ sb = dynamic_cast&lt;Windows::UI::Xaml::Media::Animation::Storyboard^&gt;(<SPAN style="color: blue;">this</SPAN>-&gt;FindName(<SPAN style="color: rgb(163, 21, 21);">"PopInStoryboard"</SPAN>));
<SPAN style="color: blue;">if</SPAN> (sb != nullptr)
{
    sb-&gt;Begin();
}    
<SPAN style="color: green;">//... rest of method as before</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI></OL>
<H4><A id="______"></A>添加主题转换</H4>
<P> 主题转换是一个完整的动画组和一个组合进预打包行为中的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.media.animation.storyboard.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Storyboard</STRONG></A>，我们可以将该行为附加到某个 UI 
元素。 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.media.animation.contentthemetransition.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">ContentThemeTransition</STRONG></A> 与 <A 
href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.contentcontrol.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">ContentControl</STRONG></A> 
一起使用，并且会在控件内容发生更改时自动触发。</P>
<P>在我们的应用中，向在拆分页面列表视图中存放文章标题的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.textblock.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">TextBlock</STRONG></A> 添加一个主题转换。当 
<STRONG>TextBlock</STRONG> 的内容发生更改时，<STRONG>ContentThemeTransition</STRONG> 
将自动触发并运行。动画是预先定义的，我们不需要执行任何操作来运行它。我们只需将其附加到 <STRONG>TextBlock</STRONG> 中即可。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" xmlns=""><STRONG>向 
SplitPage.xaml 添加主题转换</STRONG></P>
<UL>
  <LI>
  <P>在 SplitPage.xaml 中，名为 <CODE>pageTitle</CODE> 的 <STRONG>TextBlock</STRONG> 
  是一个空元素标记。为了添加主题转换，我们将其嵌入到 TextBlock 中，因此需要更改 TextBlock，使之包含开始和结束标记。使用以下 XAML 
  节点替换现有标记：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_9af3281c-e8e5-4f18-8efe-990c41b9fc70');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_9af3281c-e8e5-4f18-8efe-990c41b9fc70" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">pageTitle</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Grid.Column</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Feed.Title}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Style</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource PageHeaderTextStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
   <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock.Transitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
      <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TransitionCollection</SPAN><SPAN style="color: blue;">&gt;</SPAN>
          <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ContentThemeTransition</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
      <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">TransitionCollection</SPAN><SPAN style="color: blue;">&gt;</SPAN>
   <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock.Transitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV>
  <P>当 <STRONG>TextBlock</STRONG> 的内容发生更改时，将自动触发 
  <STRONG>ContentThemeTransition</STRONG> 并运行。动画是预先定义的，我们不需要执行任何操作来运行它。我们只需将其附加到 
  <STRONG>TextBlock</STRONG> 中即可。有关详细信息以及主题动画和过渡的列表，请参阅<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh452703.aspx">快速入门：动画</A>。</P></LI></UL>
<H3><A id="creating_a_consistent_look_with_styles"></A><A id="CREATING_A_CONSISTENT_LOOK_WITH_STYLES"></A>使用样式创建一致性外观</H3>
<P>我们希望让博客阅读器应用的外观和感觉类似于 Windows 团队博客网站。我们希望用户在该网站和我们的应用之间切换时能够拥有无缝的使用体验。我们的 
Windows Metro 风格 UI 的默认深色主题与 Windows 
团队博客网站不太匹配。这在详细信息页面上尤为明显，在该页面上我们会将实际的博客页面加载到 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.webview.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">WebView</STRONG></A> 中，如下所示：</P><IMG title="采用深色主题的详细信息页面。" 
id="xaml_DetailPageDefaultStyle" alt="采用深色主题的详细信息页面。" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC600949.png" 
xmlns="">
<P> 要使我们的应用具有可根据需要进行更新的一致外观，可使用画笔和样式。<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.media.brush.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Brush</STRONG></A> 
可以让我们在一个位置定义一种外观，然后将它用于任何需要的地方。通过使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.style.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Style</STRONG></A>，我们可以为某个控件的属性设置值并重新使用应用上的这些设置。</P>
<P>在深入了解详细信息之前，我们先来看一下如何使用画笔设置应用中页面的背景色。应用中的每个页面都有一个根 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.grid.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Grid</STRONG></A>，该根的一个 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.control.background.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Background</STRONG></A> 
属性已设置为定义页面的背景色。我们可以按如下所示单独设置每个页面的背景：<CODE>&lt;Grid 
Background="Blue"&gt;</CODE>。但是，更好的方法是定义一个 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.media.brush.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Brush</STRONG></A> 
作为资源，并使用它来定义所有页面的背景色。下面介绍如何在 Microsoft Visual Studio 模板中执行此操作：<CODE>&lt;Grid 
Background="{StaticResource 
ApplicationPageBackgroundThemeBrush}"&gt;</CODE>。</P>
<P>设置 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.grid.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Grid</STRONG></A> 的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.control.background.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Background</STRONG></A> 
属性是一种好方法，但是通常需要设置多个属性才能获取你想要的外观。可以为任何数量的属性（一起为 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.style.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Style</STRONG></A>）分组设置，并将 
<STRONG>Style</STRONG> 应用到该控件。 </P>
<P>你可以在以下位置定义资源：单个页面的 XAML 文件中、App.xaml 文件中，或者单独的资源词典 XAML 文件中，例如 
StandardStyles.xaml。定义资源的位置决定了该资源可以使用的范围。Visual Studio 将 StandardStyles.xaml 
文件创建为项目模板的一部分，并将其放在 <STRONG>Common</STRONG> 文件夹中。它是一个资源字典，包含 Visual Studio 
页面模板中所使用的值、样式和数据模板。可以在应用之间共享资源词典 XAML 文件，并且可以将多个资源词典合并到单个应用中。</P>
<P>在我们的博客阅读器应用中，我们在 App.xaml 中定义资源，以使其可以在整个应用中均可用。还有一些资源在各个页面的 XAML 
文件中定义。这些资源只在定义了它们的页面中可用。如果在 App.xaml 和页面中同时定义了具有相同关键字的资源，则页面中的资源将覆盖 App.xaml 
中的资源。同样，在 App.xaml 中定义的资源将覆盖在单独的资源词典文件中定义的具有相同关键字的资源。有关详细信息，请参阅<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465381.aspx">快速入门：设置控件样式</A>。</P>
<P>现在，让我们来看一个在我们的应用中使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.style.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Style</STRONG></A> 的示例。模板页面的外观由带有键 
<CODE>LayoutRootStyle</CODE> 的样式定义。<STRONG>Style</STRONG> 定义位于 
StandardStyles.xaml 文件中。</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_c11db4f4-c730-4a39-93c0-aa5e07ba056a');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_c11db4f4-c730-4a39-93c0-aa5e07ba056a" 
dir="ltr">
<DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Style</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource LayoutRootStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_6fd28f46-e337-4985-ac56-6044b4744732');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_6fd28f46-e337-4985-ac56-6044b4744732" 
dir="ltr">
<DIV style="color: black;">
<PRE>

    <SPAN style="color: green;">&lt;!-- Page layout roots typically use entrance animations and a theme-appropriate background color --&gt;</SPAN>

    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Style</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">LayoutRootStyle</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">TargetType</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Panel</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter</SPAN> <SPAN style="color: red;">Property</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Background</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource ApplicationPageBackgroundThemeBrush}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter</SPAN> <SPAN style="color: red;">Property</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ChildrenTransitions</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter.Value</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TransitionCollection</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">EntranceThemeTransition</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">TransitionCollection</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter.Value</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Style</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV>
<P>在 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.style.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Style</STRONG></A> 定义中，我们需要一个 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.style.targettype.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">TargetType</STRONG></A> 属性和由一个或多个 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.setter.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Setter</STRONG></A> 组成的集合。我们将 
<STRONG>TargetType</STRONG> 设置为一个字符串，该字符串指定要应用 <STRONG>Style</STRONG> 的类型，在此例中为 
<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.panel.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Panel</STRONG></A>。如果试图将某个 
<STRONG>Style</STRONG> 应用到与 <STRONG>TargetType</STRONG> 属性不匹配的控件，则会发生异常。每个 
<STRONG>Setter</STRONG> 元素都需要 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.setter.property.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Property</STRONG></A> 和 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.setter.value.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Value</STRONG></A>。这些属性设置用于指示该设置将应用于哪个控件属性，以及为该属性设置的值。</P>
<P>若要更改页面的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.control.background.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Background</STRONG></A>，我们需要使用自己自定义的画笔替换 
<CODE>ApplicationPageBackgroundThemeBrush</CODE>。对于我们自定义的画笔，我们使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.color.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Color</STRONG></A> #FF0A2562，这是一种与 
http://windowsteamblog.com 站点十分相称的合适的蓝色。若要替换系统主题画笔，我们创建基于 
<CODE>LayoutRootStyle</CODE> 的新 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.style.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Style</STRONG></A>，并更改其中的 
<STRONG>Background</STRONG> 属性。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>设置所有页面的背景色</STRONG></P>
<OL>
  <LI>
  <P>若要为布局根定义一种新样式，请将这些画笔和样式定义粘贴到 App.xaml 的 ResourceDictionary 中 
  &lt;ResourceDictionary.MergedDictionaries&gt; 节点的后面：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_416312dc-f2c0-4a20-a0f3-c53ac68199be');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_416312dc-f2c0-4a20-a0f3-c53ac68199be" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

                    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">SolidColorBrush</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">WindowsBlogBackgroundBrush</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Color</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">#FF0A2562</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Style</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">WindowsBlogLayoutRootStyle</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">TargetType</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Panel</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">BasedOn</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource LayoutRootStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter</SPAN> <SPAN style="color: red;">Property</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Background</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource WindowsBlogBackgroundBrush}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Style</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV>
  <P class="note"><STRONG>要点</STRONG>&nbsp;&nbsp;由于我们将样式以 StandardStyles.xaml 
  中的系统样式为基础，包含 StandardStyles.xaml 的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.resourcedictionary.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">ResourceDictionary</STRONG></A> 必须在 <A 
  href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.resourcedictionary.mergeddictionaries.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">MergedDictionaries</STRONG></A> 中的应用 
  <STRONG>ResourceDictionary</STRONG> 之前声明。如果不是，则 XAML 分析器无法查找样式基于的 
  <CODE>LayoutRootStyle</CODE>。</P></LI>
  <LI>
  <P>在 ItemsPage.xaml、SplitPage.xaml、以及使用 
  <CODE>WindowsBlogLayoutRootStyle</CODE> 的 DetailPage.xaml 中更新根 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.grid.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">Grid</STRONG></A>。 </P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_edf3822d-05da-437c-aa40-4cdea839ca56');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_edf3822d-05da-437c-aa40-4cdea839ca56" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

 <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Style</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource WindowsBlogLayoutRootStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV>
  <P>我们的新 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.style.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">Style</STRONG></A> 
  就像默认样式，但是具有蓝色背景。<CODE>BasedOn="{StaticResource LayoutRootStyle}"</CODE> 行表示新的 
  <STRONG>Style</STRONG> 从 <CODE>LayoutRootStyle</CODE> 
继承我们没有明确设置的所有属性。</P></LI>
  <LI>
  <P>按 F5 构建并运行应用，并且将看到蓝色页面。</P></LI></OL>
<H4><A id="_______"></A>控件和数据模板</H4>
<P>要使我们的应用具有 Windows 团队博客网站的外观和感觉，除 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.media.brush.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Brush</STRONG></A> 和 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.style.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">Style</STRONG></A> 之外，我们还应使用自定义数据模板。我们在<A 
href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045.aspx#displaying_data">显示数据</A>部分讨论了数据模板。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>添加日期控件模板</STRONG></P>
<UL>
  <LI>
  <P>在 App.xaml 中，添加一个定义显示日期的方块的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.controltemplate.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">ControlTemplate</STRONG></A>。在 App.xaml 
  中进行该定义，以使其可在 ItemsPage.xaml 和 SplitPage.xaml 中使用。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_65f25adc-a050-4cbd-b1b7-9f739b0a3ad6');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_65f25adc-a050-4cbd-b1b7-9f739b0a3ad6" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Application.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ResourceDictionary</SPAN><SPAN style="color: blue;">&gt;</SPAN>
						...
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ControlTemplate</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">DateBlockTemplate</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Canvas</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">86</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">86</SPAN><SPAN style="color: black;">"</SPAN>  <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">8,8,0,8</SPAN><SPAN style="color: black;">"</SPAN> 
                 <SPAN style="color: red;">HorizontalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Left</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">VerticalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Top</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">TextTrimming</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">WordEllipsis</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">TextWrapping</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">NoWrap</SPAN><SPAN style="color: black;">"</SPAN> 
                     <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">8,0,4,0</SPAN><SPAN style="color: black;">"</SPAN> 
                     <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">32</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontWeight</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Bold</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                         <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock.Text</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                             <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Binding</SPAN> <SPAN style="color: red;">Path</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">PubDate</SPAN><SPAN style="color: black;">"</SPAN> 
                              <SPAN style="color: red;">Converter</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource dateConverter}</SPAN><SPAN style="color: black;">"</SPAN>
                              <SPAN style="color: red;">ConverterParameter</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">month</SPAN><SPAN style="color: black;">"</SPAN>  <SPAN style="color: blue;">/&gt;</SPAN>
                         <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock.Text</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN><SPAN style="color: blue;">&gt;</SPAN>

                    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">TextTrimming</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">WordEllipsis</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">TextWrapping</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Wrap</SPAN><SPAN style="color: black;">"</SPAN> 
                         <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">40</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">8,0,0,0</SPAN><SPAN style="color: black;">"</SPAN>
                         <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">34</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontWeight</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Bold</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Canvas.Top</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">36</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock.Text</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Binding</SPAN> <SPAN style="color: red;">Path</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">PubDate</SPAN><SPAN style="color: black;">"</SPAN> 
                             <SPAN style="color: red;">Converter</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource dateConverter}</SPAN><SPAN style="color: black;">"</SPAN>
                             <SPAN style="color: red;">ConverterParameter</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">day</SPAN><SPAN style="color: black;">"</SPAN>  <SPAN style="color: blue;">/&gt;</SPAN>
                        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock.Text</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Line</SPAN> <SPAN style="color: red;">Stroke</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">White</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">StrokeThickness</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">2</SPAN><SPAN style="color: black;">"</SPAN> 
                        <SPAN style="color: red;">X1</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">54</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Y1</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">46</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">X2</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">54</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Y2</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">80</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>

                    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">TextWrapping</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Wrap</SPAN><SPAN style="color: black;">"</SPAN> 
                         <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">20</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN> 
                         <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource ControlContentThemeFontSize}</SPAN><SPAN style="color: black;">"</SPAN>
                         <SPAN style="color: red;">Canvas.Top</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">42</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Canvas.Left</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">60</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                         <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock.Text</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Binding</SPAN> <SPAN style="color: red;">Path</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">PubDate</SPAN><SPAN style="color: black;">"</SPAN>
                             <SPAN style="color: red;">Converter</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource dateConverter}</SPAN><SPAN style="color: black;">"</SPAN>
                             <SPAN style="color: red;">ConverterParameter</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">year</SPAN><SPAN style="color: black;">"</SPAN>  <SPAN style="color: blue;">/&gt;</SPAN>
                         <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock.Text</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                     <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Canvas</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ControlTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            ...
       <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ResourceDictionary</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Application.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV>
  <P>请注意，此模板定义参数“day”、“month”和“year”，这些参数将传递给我们之前在第 2 部分的 DateConverter 中创建的新 
  <STRONG>Convert</STRONG> 
  函数。我们将“day”、“month”和“year”作为单独的元素进行格式设置，每一个元素的字体大小均不相同，这样就必须在 Convert 
  方法中写入新功能，才能分别返回到相应的日期部分。</P></LI></UL>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>为项页面添加数据模板</STRONG></P>
<OL>
  <LI>
  <P>在 ItemsPage.xaml 中，我们添加了以下资源以定义默认视图中网格项的外观。请注意，我们应用之前定义的新风格。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_036b1767-b103-4b5e-a8b4-e65f81f5f69c');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_036b1767-b103-4b5e-a8b4-e65f81f5f69c" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>

...
    
   <SPAN style="color: green;">&lt;!-- light blue --&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">SolidColorBrush</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">BlockBackgroundBrush</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Color</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">#FF557EB9</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
    
    <SPAN style="color: green;">&lt;!-- Grid Styles --&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Style</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">GridTitleTextStyle</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">TargetType</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">TextBlock</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">BasedOn</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource BasicTextStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter</SPAN> <SPAN style="color: red;">Property</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">FontSize</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">26.667</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter</SPAN> <SPAN style="color: red;">Property</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Margin</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">12,0,12,2</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Style</SPAN><SPAN style="color: blue;">&gt;</SPAN>

    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Style</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">GridDescriptionTextStyle</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">TargetType</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">TextBlock</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">BasedOn</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource BasicTextStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter</SPAN> <SPAN style="color: red;">Property</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">VerticalAlignment</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Bottom</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Setter</SPAN> <SPAN style="color: red;">Property</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Margin</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">12,0,12,60</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Style</SPAN><SPAN style="color: blue;">&gt;</SPAN>

    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">DefaultGridItemTemplate</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">HorizontalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Left</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">250</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">250</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Border</SPAN> <SPAN style="color: red;">Background</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource BlockBackgroundBrush}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Title}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Style</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource GridTitleTextStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Description}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Style</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource GridDescriptionTextStyle}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN> <SPAN style="color: red;">VerticalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Bottom</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Orientation</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Horizontal</SPAN><SPAN style="color: black;">"</SPAN>
                        <SPAN style="color: red;">Background</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource ListViewItemOverlayBackgroundThemeBrush}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Last Updated</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">12,4,0,8</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">42</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding PubDate, Converter={StaticResource dateConverter}}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">12,4,12,8</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>

<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>另外在 ItemsPage.xaml 中，更新 <STRONG>itemGridView</STRONG> 的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.itemscontrol.itemtemplate.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">ItemTemplate</STRONG></A> 属性，即可使用我们的 
  <STRONG>DefaultGridItemTemplate</STRONG> 资源，而不使用 StandardStyles.xaml 中定义的默认模板 
  <STRONG>Standard250x250ItemTemplate</STRONG>。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_eed3d568-9ebb-45bc-9c4f-c43dca57d8e0');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_eed3d568-9ebb-45bc-9c4f-c43dca57d8e0" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">GridView</SPAN>
            <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemGridView</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">AutomationProperties.AutomationId</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemsGridView</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">AutomationProperties.Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Items</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">TabIndex</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0,-4,0,0</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">Padding</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">116,0,116,46</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">SelectionMode</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">None</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">IsItemClickEnabled</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">True</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">ItemsSource</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Source={StaticResource itemsViewSource}}</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">ItemTemplate</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource DefaultGridItemTemplate}</SPAN><SPAN style="color: black;">"</SPAN>
            <SPAN style="color: red;">ItemClick</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemView_ItemClick</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI></OL>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>为拆分页面添加数据模板</STRONG></P>
<OL>
  <LI>
  <P>在 SplitPage.xaml 中，添加以下资源以定义列表项在默认视图中的外观：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_7a988b9d-55b4-4c31-a4b4-c86f4c3e1310');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_7a988b9d-55b4-4c31-a4b4-c86f4c3e1310" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>
				...
    <SPAN style="color: green;">&lt;!-- green --&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">SolidColorBrush</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">BlockBackgroundBrush</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Color</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">#FF6BBD46</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>

    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">DefaultListItemTemplate</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">HorizontalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Stretch</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">110</SPAN><SPAN style="color: black;">"</SPAN> 
         <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">10,10,10,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">*</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: green;">&lt;!-- Green date block --&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Border</SPAN> <SPAN style="color: red;">Background</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource BlockBackgroundBrush}</SPAN><SPAN style="color: black;">"</SPAN> 
             <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">110</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">110</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ContentControl</SPAN> <SPAN style="color: red;">Template</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource DateBlockTemplate}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN> <SPAN style="color: red;">Grid.Column</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN>  <SPAN style="color: red;">HorizontalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Left</SPAN><SPAN style="color: black;">"</SPAN> 
             <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">12,8,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Title}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">26.667</SPAN><SPAN style="color: black;">"</SPAN> 
                 <SPAN style="color: red;">TextWrapping</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Wrap</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">MaxHeight</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">72</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Foreground</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">#FFFE5815</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Author}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">18.667</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    ...
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>在 SplitPage.xaml 中，我们还更新了 <STRONG>itemListView</STRONG> 中的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.itemscontrol.itemtemplate.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">ItemTemplate</STRONG></A> 属性，以使用我们的 
  <STRONG>DefaultListItemTemplate</STRONG> 资源而不是使用默认模板 
  <STRONG>Standard130ItemTemplate</STRONG>。此处显示的是更新后的 
  <STRONG>itemListView</STRONG> 的 XAML。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_2f31d51f-02f4-455f-950d-c307a7f9be98');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_2f31d51f-02f4-455f-950d-c307a7f9be98" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN>
    <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemListView</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">AutomationProperties.AutomationId</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemsListView</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">AutomationProperties.Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Items</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">TabIndex</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">-10,-10,0,0</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Padding</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">120,0,0,60</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">ItemsSource</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Source={StaticResource itemsViewSource}}</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">IsSwipeEnabled</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">False</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">SelectionChanged</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemListView_SelectionChanged</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">ItemTemplate</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource DefaultListItemTemplate}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI></OL>
<P>在应用了我们的样式后，该应用就非常符合 Windows 团队博客网站的外观和感觉了：</P>
<P><IMG title="设置样式后的集合页面。" id="xaml_CollectionPageMd" alt="设置样式后的集合页面。" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC600950.png" 
xmlns=""></P>
<P><IMG title="设置样式后的拆分页面。" id="xaml_SplitPageMd" alt="设置样式后的拆分页面。" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC600951.png" 
xmlns=""></P>
<P><IMG title="设置样式后的详细信息页面。" id="xaml_DetailPageMd" alt="设置样式后的详细信息页面。" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC600952.png" 
xmlns=""></P>
<P>通过使用样式和在其他样式基础上新建样式，我们可以为自己的应用快速定义和应用各种外观。在下个部分中，我们综合所有动画和样式知识来使应用在运行时能够流畅地适应各种布局和方向。</P>
<H3><A id="adapting_to_different_layouts"></A><A id="ADAPTING_TO_DIFFERENT_LAYOUTS"></A>适应不同的布局</H3>
<P>通常，应用会设计为以全屏幕方式横向查看。但 Metro 风格 UI 
必须适应不同的方向和布局。具体来说，它必须对纵向和横向都支持。在横向方位中，它必须支持“全屏”、“FilledOrNarrow”和“贴靠”布局。<EM></EM><EM></EM><EM></EM>在从空白模板创建博客阅读器页面时，我们已看到它在纵向上显示不正常。在本部分，我们来了解一下如何使我们的应用在任何分辨率、任何方向均能显示正常。</P>
<P>在 Visual Studio 中进行开发时，你可以使用 Simulator 调试器来测试布局。只需按下 F5，即可以使用调试器工具栏来通过 
Simulator 进行调试。</P>
<P>Visual Studio 模板包含处理视图状态更改的代码。此代码包含在 LayoutAwarePage.cs or LayoutAwarePage.vb 
文件中，它会将我们的应用状态映射到 XAML 中定义的视觉状态。因为已为我们提供了页面布局逻辑，我们只需要提供要用于每种页面视觉状态的视图。</P>
<P>要使用 XAML 在不同视图间转换，应使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.visualstatemanager.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">VisualStateManger</STRONG></A> 为应用定义不同的 <A 
href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.visualstate.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">VisualState</STRONG></A>。在此，我们在 
ItemsPage.xaml 中定义了一个 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.visualstategroup.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">VisualStateGroup</STRONG></A>。该组中包含 4 个 
<STRONG>VisualState</STRONG>，分别名为 
<STRONG>FullScreenLandscape</STRONG>、<STRONG>FilledOrNarrow</STRONG>、<STRONG>FullScreenPortrait</STRONG> 
和 <STRONG>Snapped</STRONG>。不能同时使用来自同一 <STRONG>VisualStateGroup</STRONG> 的不同 
<STRONG>VisualState</STRONG>。 每个 <STRONG>VisualState</STRONG> 中都包含动画，用于指示应用需要对 
UI 的 XAML 中指定的基准进行哪些更改。</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_3e10e7cf-1fca-45d1-bfa4-a83cec3dc7e4');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_3e10e7cf-1fca-45d1-bfa4-a83cec3dc7e4" 
dir="ltr">
<DIV style="color: black;">
<PRE>

...not for pasting!
<SPAN style="color: green;">&lt;!--App Orientation States--&gt;</SPAN>
  <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualStateManager.VisualStateGroups</SPAN><SPAN style="color: blue;">&gt;</SPAN>
     <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualStateGroup</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">FullScreenLandscape</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">FilledOrNarrow</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN> ... <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">FullScreenPortrait</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN> ... <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Snapped</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN> ... <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualStateGroup</SPAN><SPAN style="color: blue;">&gt;</SPAN>
 <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualStateManager.VisualStateGroups</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV>
<P>当应用处于横向全屏幕视图时，使用 <STRONG>FullScreenLandscape</STRONG> 状态。因为我们正是针对此视图设计了默认的 
UI，所以无需进行任何更改，这只是一个空的 <STRONG>VisualState</STRONG>。</P>
<P>当用户将另一个应用对齐到屏幕的一侧时，使用 <STRONG>FilledOrNarrow</STRONG> 
状态。在此情况下，项视图页面只是移走，不需要更改。这也只是一个空的 <STRONG>VisualState</STRONG>。</P>
<P>当应用从横向旋转为纵向时，使用 <STRONG>FullScreenPortrait</STRONG> 
状态。在此视觉状态中，有两个动画。一个用于更改“后退”按钮所用的样式，另一个用于更改 <STRONG>itemGridView</STRONG> 
的页边距，以便所有内容显示都更好地与屏幕相吻合。在 iage UI 的 XAML 中，定义了一个 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.gridview.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">GridView</STRONG></A> 和一个 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.listview.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">ListView</STRONG></A> 并将其绑定到数据集合。默认情况下，会显示 
<STRONG>GridView</STRONG>，而 <STRONG>ListView</STRONG> 处于折叠状态。在 
<STRONG>Portrait</STRONG> 状态中，包含三个动画，用于折叠 <STRONG>GridView</STRONG> 、显示 
<STRONG>ListView</STRONG> 和更改“后退”按钮的 <STRONG>Style</STRONG> 以使其更小。</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_242b73b1-3f53-4d14-b81e-4d9f8e47b940');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_242b73b1-3f53-4d14-b81e-4d9f8e47b940" 
dir="ltr">
<DIV style="color: black;">
<PRE>

...Not for pasting!
<SPAN style="color: green;">&lt;!-- The entire page respects the narrower 100-pixel margin convention for portrait --&gt;</SPAN>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">FullScreenPortrait</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN> 
         <SPAN style="color: red;">Storyboard.TargetName</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">backButton</SPAN><SPAN style="color: black;">"</SPAN> 
         <SPAN style="color: red;">Storyboard.TargetProperty</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Style</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
             <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DiscreteObjectKeyFrame</SPAN> <SPAN style="color: red;">KeyTime</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0</SPAN><SPAN style="color: black;">"</SPAN> 
              <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource PortraitBackButtonStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN> 
         <SPAN style="color: red;">Storyboard.TargetName</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemGridView</SPAN><SPAN style="color: black;">"</SPAN>
         <SPAN style="color: red;">Storyboard.TargetProperty</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Margin</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
         <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DiscreteObjectKeyFrame</SPAN> <SPAN style="color: red;">KeyTime</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">100,0,90,60</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN><SPAN style="color: blue;">&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV>
<P>当用户显示两个应用，而我们的应用是其中较窄的一个时，使用 <STRONG>Snapped</STRONG> 状态。在这种状态下，我们的应用的宽度仅为 
320 设备无关像素 (DIP)，因此还需要进一步更改。在项页面 UI 的 XAML 中，定义了一个 <STRONG>GridView</STRONG> 和一个 
<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.listview.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">ListView</STRONG></A> 并将其绑定到数据集合。默认情况下，会显示 
<STRONG>itemGridViewScroller</STRONG>，而 <STRONG>itemListViewScroller</STRONG> 
处于折叠状态。在 <STRONG>Snapped</STRONG> 状态中，包含四个动画，用于折叠 
<STRONG>itemListViewScroller</STRONG> 、显示 <STRONG>itemListViewScroller</STRONG> 
和更改“后退”按钮的 <STRONG>Style</STRONG> 和页面标题以使其更小。</P>
<DIV class="codeSnippetContainer" xmlns="">
<DIV class="codeSnippetContainerTabs">
<DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
<DIV class="codeSnippetContainerCodeContainer">
<DIV class="codeSnippetToolBar">
<DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_53c946a0-739b-44c8-9c9d-9f0d05f64feb');">复制</A> 
            </DIV></DIV>
<DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_53c946a0-739b-44c8-9c9d-9f0d05f64feb" 
dir="ltr">
<DIV style="color: black;">
<PRE>

...not for pasting!
<SPAN style="color: green;">&lt;!--
    The Back button and title have different styles when they're snapped, and the list representation
    is substituted for the grid that's displayed in all other view states.
--&gt;</SPAN>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Snapped</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN> 
         <SPAN style="color: red;">Storyboard.TargetName</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">backButton</SPAN><SPAN style="color: black;">"</SPAN> 
         <SPAN style="color: red;">Storyboard.TargetProperty</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Style</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DiscreteObjectKeyFrame</SPAN> <SPAN style="color: red;">KeyTime</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0</SPAN><SPAN style="color: black;">"</SPAN> 
            <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource SnappedBackButtonStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN> 
         <SPAN style="color: red;">Storyboard.TargetName</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">pageTitle</SPAN><SPAN style="color: black;">"</SPAN> 
         <SPAN style="color: red;">Storyboard.TargetProperty</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Style</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DiscreteObjectKeyFrame</SPAN> <SPAN style="color: red;">KeyTime</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0</SPAN><SPAN style="color: black;">"</SPAN> 
             <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource SnappedPageHeaderTextStyle}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN><SPAN style="color: blue;">&gt;</SPAN>

        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN> 
         <SPAN style="color: red;">Storyboard.TargetName</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemListScrollViewer</SPAN><SPAN style="color: black;">"</SPAN> 
         <SPAN style="color: red;">Storyboard.TargetProperty</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Visibility</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DiscreteObjectKeyFrame</SPAN> <SPAN style="color: red;">KeyTime</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Visible</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN> 
         <SPAN style="color: red;">Storyboard.TargetName</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemGridScrollViewer</SPAN><SPAN style="color: black;">"</SPAN>
         <SPAN style="color: red;">Storyboard.TargetProperty</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Visibility</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DiscreteObjectKeyFrame</SPAN> <SPAN style="color: red;">KeyTime</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Collapsed</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV>
<P>在本教程的<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045.aspx#creating_a_consistent_look_with_styles">使用样式创建一致性外观</A>部分，我们创建了用于自定义应用外观的样式和模板。默认的横向视图使用这些样式和模板。要在不同视图中保持自定义外观，还需要为这些视图创建自定义样式和模板。</P>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>为项页面对齐视图添加数据模板</STRONG></P>
<OL>
  <LI>
  <P>在 ItemsPage.xaml 中，我们为网格项创建了一个数据模板。我们还需要为 <STRONG>Snapped</STRONG> 
  视图中显示的列表项提供新的数据模板。我们将此模板命名为 <STRONG>NarrowListItemTemplate</STRONG> 并将其添加到 
  ItemsPage.xaml 的资源部分，紧跟在 <STRONG>DefaultGridItemTemplate</STRONG> 资源之后。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_7db7bf34-e364-49e6-be16-f7a60e11eced');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_7db7bf34-e364-49e6-be16-f7a60e11eced" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>
...
    <SPAN style="color: green;">&lt;!-- Used in Snapped view --&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">NarrowListItemTemplate</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">80</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">*</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Border</SPAN> <SPAN style="color: red;">Background</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource BlockBackgroundBrush}</SPAN><SPAN style="color: black;">"</SPAN> 
             <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">80</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">80</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ContentControl</SPAN> <SPAN style="color: red;">Template</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource DateBlockTemplate}</SPAN><SPAN style="color: black;">"</SPAN> 
             <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">-12,-12,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN> <SPAN style="color: red;">Grid.Column</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">HorizontalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Left</SPAN><SPAN style="color: black;">"</SPAN> 
              <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">12,8,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN> 
             <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Title}</SPAN><SPAN style="color: black;">"</SPAN> 
              <SPAN style="color: red;">MaxHeight</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">56</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">TextWrapping</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Wrap</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>要使 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.listview.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">ListView</STRONG></A> 显示我们的新数据模板，应更新 
  <STRONG>itemListView</STRONG> 的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.itemscontrol.itemtemplate.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">ItemTemplate</STRONG></A> 属性使用我们的 
  <STRONG>NarrowListItemTemplate</STRONG> 资源，而不使用 StandardStyles.xaml 中定义的默认模板  
  <STRONG>Standard80ItemTemplate</STRONG>。在 ItemsPage.xaml 中，使用以下代码片段替换 
  <STRONG>itemListView</STRONG>：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_81d9d4aa-362f-4c2b-8252-fbef9c8847a1');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_81d9d4aa-362f-4c2b-8252-fbef9c8847a1" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ListView</SPAN>
    <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemListView</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">AutomationProperties.AutomationId</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemsListView</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">AutomationProperties.Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Items</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">TabIndex</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Grid.Row</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Visibility</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Collapsed</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0,-10,0,0</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">Padding</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">10,0,0,60</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">ItemsSource</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Source={StaticResource itemsViewSource}}</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">ItemTemplate</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource NarrowListItemTemplate}</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">SelectionMode</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">None</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">IsItemClickEnabled</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">True</SPAN><SPAN style="color: black;">"</SPAN>
    <SPAN style="color: red;">ItemClick</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemView_ItemClick</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>


</PRE></DIV></DIV></DIV></DIV></LI></OL>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>为拆分页面贴靠和 FilledOrNarrow 视图添加数据模板</STRONG></P>
<OL>
  <LI>
  <P>在 SplitPage.xaml 中，我们创建一个 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.listview.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">ListView</STRONG></A> 模板以用于 
  <STRONG>FilledOrNarrow</STRONG> 和 <STRONG>Snapped</STRONG> 视图，并在屏幕宽度小于 1366 
  DIP 时用于 <STRONG>FullScreenLandscape</STRONG> 视图。我们还将此模板命名为 
  <STRONG>NarrowListItemTemplate</STRONG> 并将其添加到 SplitPage.xaml 的资源部分，紧跟在 
  <STRONG>DefaultListItemTemplate</STRONG> 资源之后。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_70c35653-279f-4223-ac68-8f7a5090726d');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_70c35653-279f-4223-ac68-8f7a5090726d" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>
...
    <SPAN style="color: green;">&lt;!-- Used in FilledOrNarrow and Snapped views --&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN> <SPAN style="color: red;">x:Key</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">NarrowListItemTemplate</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN> <SPAN style="color: red;">Height</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">80</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Auto</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ColumnDefinition</SPAN> <SPAN style="color: red;">Width</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">*</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid.ColumnDefinitions</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            &lt;Border Background="{StaticResource BlockBackgroundBrush}" 
\            Width="80" Height="80"/&gt;
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ContentControl</SPAN> <SPAN style="color: red;">Template</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource DateBlockTemplate}</SPAN><SPAN style="color: black;">"</SPAN>
             <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">-12,-12,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN> <SPAN style="color: red;">Grid.Column</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">1</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">HorizontalAlignment</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Left</SPAN><SPAN style="color: black;">"</SPAN> 
             <SPAN style="color: red;">Margin</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">12,8,0,0</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Title}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">MaxHeight</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">56</SPAN><SPAN style="color: black;">"</SPAN> 
                  <SPAN style="color: red;">Foreground</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">#FFFE5815</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">TextWrapping</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Wrap</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
                <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">TextBlock</SPAN> <SPAN style="color: red;">Text</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{Binding Author}</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">FontSize</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">12</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: blue;">/&gt;</SPAN>
            <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">StackPanel</SPAN><SPAN style="color: blue;">&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Grid</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">DataTemplate</SPAN><SPAN style="color: blue;">&gt;</SPAN>
...
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Page.Resources</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>要使用此数据模板，需更新要使用该模板的可视化状态。在 <STRONG>Snapped</STRONG> 和 
  <STRONG>FilledOrNarrow</STRONG> 可视化状态的 XAML 中，我们发现了针对 
  <STRONG>itemListView</STRONG> 的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.itemscontrol.itemtemplate.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">ItemTemplate</STRONG></A> 
  属性的动画。接着，我们更改了该值，以使用 <STRONG>NarrowListItemTemplate</STRONG> 资源而不使用默认的 
  <STRONG>Standard80ItemTemplate</STRONG> 资源。以下是更新后的动画 XAML。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_23e5d272-cd9e-4b40-8975-4804c7ab4a1f');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_23e5d272-cd9e-4b40-8975-4804c7ab4a1f" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">FilledOrNarrow</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    ....
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN> <SPAN style="color: red;">Storyboard.TargetName</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemListView</SPAN><SPAN style="color: black;">"</SPAN> 
          <SPAN style="color: red;">Storyboard.TargetProperty</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemTemplate</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DiscreteObjectKeyFrame</SPAN> <SPAN style="color: red;">KeyTime</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0</SPAN><SPAN style="color: black;">"</SPAN> 
             <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource NarrowListItemTemplate}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    ....
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN><SPAN style="color: blue;">&gt;</SPAN>
...
<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Snapped</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    ....
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN> <SPAN style="color: red;">Storyboard.TargetName</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">itemListView</SPAN><SPAN style="color: black;">"</SPAN> 
         <SPAN style="color: red;">Storyboard.TargetProperty</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">ItemTemplate</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DiscreteObjectKeyFrame</SPAN> <SPAN style="color: red;">KeyTime</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0</SPAN><SPAN style="color: black;">"</SPAN> 
             <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">{StaticResource NarrowListItemTemplate}</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    ....
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI>
  <LI>
  <P>我们还使用自己的详细信息部分（该部分使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.webview.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">WebView</STRONG></A>）替换了拆分页面的项详细信息部分。由于进行了此更改，<STRONG>Snapped_Detail</STRONG> 
  视觉状态中的动画将不再存在的元素作为目标。当我们使用此视觉状态时，这些动画将导致错误，因此我们必须将其删除。在 SplitPage.xaml 中，我们从 
  <STRONG>Snapped_Detail</STRONG> 视觉状态中删除这些动画。</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_86f69313-c427-46d2-8703-4170807bc21c');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_86f69313-c427-46d2-8703-4170807bc21c" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Snapped_Detail</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    ...
       <SPAN style="color: green;">&lt;!-- REMOVE THESE ELEMENTS: --&gt;</SPAN>
        <SPAN style="color: green;">&lt;!--&lt;ObjectAnimationUsingKeyFrames 
             Storyboard.TargetName="itemDetailTitlePanel" 
             Storyboard.TargetProperty="(Grid.Row)"&gt;
                &lt;DiscreteObjectKeyFrame KeyTime="0" Value="0"/&gt;
            &lt;/ObjectAnimationUsingKeyFrames&gt;
            &lt;ObjectAnimationUsingKeyFrames 
             Storyboard.TargetName="itemDetailTitlePanel" 
             Storyboard.TargetProperty="(Grid.Column)"&gt;
                &lt;DiscreteObjectKeyFrame KeyTime="0" Value="0"/&gt;
            &lt;/ObjectAnimationUsingKeyFrames&gt;--&gt;</SPAN>
...
        <SPAN style="color: green;">&lt;!--&lt;ObjectAnimationUsingKeyFrames 
             Storyboard.TargetName="itemSubtitle" 
             Storyboard.TargetProperty="Style"&gt;
                &lt;DiscreteObjectKeyFrame KeyTime="0" 
                 Value="{StaticResource CaptionTextStyle}"/&gt;
            &lt;/ObjectAnimationUsingKeyFrames&gt;--&gt;</SPAN>
    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI></OL>
<P class="proch"><IMG title="Hh465045.wedge(zh-cn,WIN.10).gif" id="wedge" alt="Hh465045.wedge(zh-cn,WIN.10).gif" 
src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC153696.gif" 
xmlns=""><STRONG>调整 <STRONG>Snapped</STRONG> 视图中的 <STRONG>WebView</STRONG> 
边距</STRONG></P>
<UL>
  <LI>
  <P>在 DetailPage.xaml 中，我们只需在 <STRONG>Snapped</STRONG> 视图中调整 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.webview.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">WebView</STRONG></A> 
  的边距来使用所有可用空间。在<STRONG>Snapped</STRONG>  视觉状态的 XAML 中，我们添加一个动画来更改 
  <STRONG>contentViewBorder</STRONG> 上的 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.frameworkelement.margin.aspx"><STRONG 
  xmlns="http://www.w3.org/1999/xhtml">Margin</STRONG></A> 属性的值，如下所示：</P>
  <DIV class="codeSnippetContainer" xmlns="">
  <DIV class="codeSnippetContainerTabs">
  <DIV class="codeSnippetContainerTabSingle" dir="ltr"><A>XAML</A></DIV></DIV>
  <DIV class="codeSnippetContainerCodeContainer">
  <DIV class="codeSnippetToolBar">
  <DIV class="codeSnippetToolBarText"><A name="CodeSnippetCopyLink" title="复制到剪贴板。" 
  style="display: none;" href="javascript:CodeSnippet_CopyCode('CodeSnippetContainerCode_7bad5bd1-a1e9-4d7d-80c4-d3a4d0886dec');">复制</A> 
              </DIV></DIV>
  <DIV class="codeSnippetContainerCode" id="CodeSnippetContainerCode_7bad5bd1-a1e9-4d7d-80c4-d3a4d0886dec" 
  dir="ltr">
  <DIV style="color: black;">
<PRE>

<SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN> <SPAN style="color: red;">x:Name</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Snapped</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>
    ...
        <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN> <SPAN style="color: red;">Storyboard.TargetName</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">contentViewBorder</SPAN><SPAN style="color: black;">"</SPAN> 
         <SPAN style="color: red;">Storyboard.TargetProperty</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">Margin</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">&gt;</SPAN>
            <SPAN style="color: blue;">&lt;</SPAN><SPAN style="color: rgb(163, 21, 21);">DiscreteObjectKeyFrame</SPAN> <SPAN style="color: red;">KeyTime</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">0</SPAN><SPAN style="color: black;">"</SPAN> <SPAN style="color: red;">Value</SPAN><SPAN style="color: blue;">=</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">20,5,20,20</SPAN><SPAN style="color: black;">"</SPAN><SPAN style="color: blue;">/&gt;</SPAN>
        <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">ObjectAnimationUsingKeyFrames</SPAN><SPAN style="color: blue;">&gt;</SPAN>

    <SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">Storyboard</SPAN><SPAN style="color: blue;">&gt;</SPAN>
<SPAN style="color: blue;">&lt;/</SPAN><SPAN style="color: rgb(163, 21, 21);">VisualState</SPAN><SPAN style="color: blue;">&gt;</SPAN>

</PRE></DIV></DIV></DIV></DIV></LI></UL>
<H3><A id="adding_a_splash_screen_and_logo"></A><A id="ADDING_A_SPLASH_SCREEN_AND_LOGO"></A>添加初始屏幕和徽标</H3>
<P>我们的应用带给用户的第一印象来自于初始屏幕。当用户启动应用时将显示初始屏幕，该屏幕会在应用初始化资源时为用户提供即时反馈。当应用的第一个页面准备就绪可以显示时，它就会关闭。</P>
<P>初始屏幕由一种背景色和一个 624 x 300 像素的图像组成。这些值是在 Package.appxmanifest 
文件中设置的。你可以在清单编辑器中打开此文件。在清单编辑器的“应用程序 
UI”选项卡中，我们设置了初始屏幕图像的路径和背景色<STRONG></STRONG>。项目模板提供名为 SplashScreen.png 
的默认空白图像。我们将空白图像替换为自己的初始屏幕图像，该图像可以明确标识我们的应用，并立即将用户的注意力吸引到应用上来。以下是我们的博客阅读器的初始屏幕：</P><IMG 
title="初始屏幕图像。" id="xaml_SplashScreen" alt="初始屏幕图像。" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/IC561675.png" 
xmlns="">
<P>基本初始屏幕可以适用于我们的博客阅读器，但你也可以使用 <A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/windows.applicationmodel.activation.splashscreen.aspx"><STRONG 
xmlns="http://www.w3.org/1999/xhtml">SplashScreen</STRONG></A> 
类的属性和方法扩展该初始屏幕。你可以使用 <STRONG>SplashScreen</STRONG> 
类获取初始屏幕的坐标，然后利用这些坐标定位该应用的第一个页面。还可以掌握初始屏幕消失的时间，以确定启动应用的任何内容进入动画的时机。</P>
<H3><A id="Whats_next"></A><A id="whats_next"></A><A id="WHATS_NEXT"></A>总结</H3>
<P>在本文章中，我们了解了如何使用 Visual Studio Express 2012 for Windows 8 
中的内置页面模板构建多页面应用，以及如何在页面之间导航和传递数据。我们了解了如何使用样式和模板以使我们的应用符合 Windows 
团队博客网站的风格。我们还了解了如何使用主题动画、应用栏和初始屏幕来使应用适合 Windows 8 的个性化内容。 
最后，我们了解了如何根据各种布局和方向来调整应用，从而让它始终保持美观。</P>
<P></P>
<P>我们的应用现在已基本就绪，可以提交到 Windows 应用商店了。有关如何将应用提交至 Windows 应用商店的详细信息，请参阅：</P>
<UL>
  <LI><A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/br230836.aspx">销售应用</A> 
  </LI>
  <LI>本教程中不涉及如何使你的应用可供访问这一主题。有关详细信息，请参阅<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh452702.aspx">辅助功能</A>。</LI>
  <LI>查看有关<A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/br229583.aspx">使用 
  C#、C++ 和 VB 创建 Windows Metro 风格应用</A>的学习和参考资源列表。</LI></UL>
<H3><A id="related_topics"></A>相关主题</H3>
<DL>
  <DT><A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh700360.aspx">使用 
  C++ 的 Metro 风格应用的路线图</A> </DT>
  <DT><A href="http://msdn.microsoft.com/zh-cn/library/windows/apps/br211384.aspx">使用 
  Visual Studio 11 开发 Metro 风格应用</A> </DT></DL>
<P>&nbsp;</P>
<P>&nbsp;</P></DIV></DIV>
<DIV id="contentFeedback">
<FORM action="/zh-cn/library/windows/apps/feedback/add/hh465045.aspx" method="post"><INPUT 
name="__RequestVerificationToken" type="hidden" value="fSLQ3DJ1E1QjyQ1h5YlkbQP0wrc+GFo/OiStm+gBvNN/HyZRBPKWJGFDi5kZyEdT96lgcRIEhBaVFamdvk20aCmEoiW8I8vaj5qbMBTFHd6/ldvlWbi+UISvBffwvN4VqW11Rg=="> 
    
<DIV id="contentFeedbackContainer">
<DIV class="FeedbackTitleContainer"><A name="feedback"></A>         本文是否对您有所帮助？  
           <INPUT name="rdIsUseful" id="rdIsUsefulYes" onclick="toggleContentFeedback('Yes');" 
type="radio" value="1"><LABEL for="rdIsUsefulYes">是</LABEL>             <INPUT 
name="rdIsUseful" id="rdIsUsefulNo" onclick="toggleContentFeedback('No');" type="radio" 
value="0"><LABEL for="rdIsUsefulNo">否</LABEL>                 </DIV>
<DIV id="contentFeedbackQAContainer">
<DIV class="FeedbackListContainer" id="feedbackListNoContainer">
<DIV><INPUT name="chkbxNo" id="chkbxNo201" type="checkbox" value="201">          
                       <LABEL for="chkbxNo201">不准确</LABEL>                       
      </DIV>
<DIV><INPUT name="chkbxNo" id="chkbxNo202" type="checkbox" value="202">          
                       <LABEL for="chkbxNo202">深度不够</LABEL>                      
       </DIV>
<DIV><INPUT name="chkbxNo" id="chkbxNo203" type="checkbox" value="203">          
                       <LABEL for="chkbxNo203">需要更多代码示例</LABEL>                  
           </DIV>
<DIV><INPUT name="chkbxNo" id="chkbxNo204" type="checkbox" value="204">          
                       <LABEL for="chkbxNo204">翻译需要改进</LABEL>                    
         </DIV></DIV>
<DIV class="FeedbackTellUsMoreContainer"><TEXTAREA name="feedbackText" class="TellUsMoreTextBoxSearchLoaded" id="feedbackText" onmouseover="TextBoxCharactersCounter(this, document.getElementById('feedbackTextCounter'), 1500)" onkeydown="TextBoxCharactersCounter(this, document.getElementById('feedbackTextCounter'), 1500)" onkeyup="TextBoxCharactersCounter(this, document.getElementById('feedbackTextCounter'), 1500)" onfocus="WatermarkFocus(this, '请告诉我们更多意见...', 'TellUsMoreTextBoxSearch')" onblur="WatermarkBlur(this, '请告诉我们更多意见...', 'TellUsMoreTextBoxSearchLoaded')">请告诉我们更多意见...</TEXTAREA> 
                </DIV><SPAN class="counter">(<SPAN 
id="feedbackTextCounter">1500</SPAN> 个剩余字符)</SPAN>                 <INPUT name="returnUrl" 
id="returnUrl" type="hidden" value="http://msdn.microsoft.com/zh-cn/library/windows/apps/hh465045.aspx"> 
                <INPUT title="单击以提交反馈" id="submit" onclick="WatermarkOnSubmit(document.getElementById('feedbackText'), '请告诉我们更多意见...', 'TellUsMoreTextBoxSearch')" type="submit" value="提交"> 
                
<DIV style="clear: both;"></DIV></DIV></DIV></FORM></DIV></DIV></DIV>
<DIV id="ux-footer">
<DIV class="blocks">
<DIV class="footerPrimaryBlock">
<DIV class="footerLinksTitles">网络站点</DIV>
<DIV style="padding-top: 5px; padding-bottom: 14px;"><A title="Microsoft Developer Network" 
href="http://msdn.microsoft.com/">
<DIV class="clip49x17"><IMG title="Microsoft Developer Network" class="footerLogoImage" 
alt="网络站点" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/ImageSprite.png">     
            </DIV></A>             </DIV>
<DIV style="padding-bottom: 71px;"><SPAN class="footerLinks"></SPAN></DIV></DIV>
<DIV class="footerSubBlock">&nbsp;</DIV>
<DIV class="footerSubBlock">
<DIV class="footerLinksTitles">Windows 开发中心</DIV>
<DIV class="footerLinks" style="padding-top: 5px;"><A title="Windows 开发中心" href="http://msdn.microsoft.com/windows">Windows 
开发中心</A>                     </DIV>
<DIV class="footerLinks" style="padding-top: 5px;"><A title="Windows 应用商店应用" 
href="http://msdn.microsoft.com/windows/apps">Windows 应用商店应用</A>                 
    </DIV>
<DIV class="footerLinks" style="padding-top: 5px;"><A title="Internet Explorer" 
href="http://msdn.microsoft.com/ie">Internet Explorer</A>                     
</DIV>
<DIV class="footerLinks" style="padding-top: 5px;"><A title="桌面应用程序" href="http://msdn.microsoft.com/windows/desktop">桌面应用程序</A> 
                    </DIV>
<DIV class="footerLinks" style="padding-top: 5px;"><A title="硬件" href="http://msdn.microsoft.com/windows/hardware">硬件</A> 
                    </DIV></DIV>
<DIV class="footerFinalBlock">
<DIV class="footerLinksTitles">其他链接</DIV>
<DIV class="footerLinks" style="padding-top: 5px;"><A title="支持" href="http://msdn.microsoft.com/windows/apps/hh690938">支持</A> 
                    </DIV></DIV></DIV>
<DIV class="footerMSLogo"><A title="Microsoft" href="http://www.microsoft.com/">
<DIV class="clip104x20"><IMG title="Microsoft" class="footerMsLogo" alt="" src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/ImageSprite.png"> 
        </DIV></A>     </DIV>
<DIV class="footerSubLinksContainer">
<DIV class="footerSubLinks"><A title="保留所有权利" href="http://msdn.microsoft.com/windows/apps/cc300389">保留所有权利</A> 
              <SPAN class="footerSubLinksDivider">|</SPAN>             <A title="商标" 
href="http://www.microsoft.com/library/toolbar/3.0/trademarks/zh-cn.mspx">商标</A> 
              <SPAN class="footerSubLinksDivider">|</SPAN>             <A title="隐私和 Cookie" 
href="http://go.microsoft.com/fwlink/?LinkId=248681">隐私和 Cookie</A>              
 <SPAN class="footerSubLinksDivider">|</SPAN>             <A title=" 中国（简体中文）" 
href="http://msdn.microsoft.com/zh-cn/windows/apps/SelectLocale?fromPage=%2flibrary%2fwindows%2fapps%2fhh465045">中国（简体中文）</A> 
        </DIV>
<DIV title="© 2012 Microsoft. 版权所有。" class="footerCopyright">© 2012 Microsoft. 
版权所有。</DIV></DIV></DIV>
<DIV class="footerPrintView">
<DIV class="footerCopyrightPrintView">© 2012 Microsoft. 版权所有。 </DIV></DIV><INPUT 
id="MtpsDevice" type="hidden" value="Default"> <!--[CDATA[ Third party scripts and code linked to or referenced from this website are licensed to you by the parties that own such code, not by Microsoft.  See ASP.NET Ajax CDN Terms of Use – http://www.asp.net/ajaxlibrary/CDN.ashx. ]]--> 
                                                                                 
      
<SCRIPT type="text/javascript">
//<![CDATA[
  var literalNormalizedUrl = '/zh-cn/library/windows/apps/hh465045(d=default,l=zh-cn,v=win.10).aspx';
  var wt_nvr_ru = 'WT_NVR_RU';
  var wt_fpcdom = '.microsoft.com';
  var wt_domlist = 'msdn.microsoft.com';
  var wt_pathlist = '';
  var wt_paramlist = 'DCSext.mtps_devcenter';
  var wt_siteid = 'MSDN';
  var gDomain = 'm.webtrends.com';
  var gDcsId = 'dcsmgru7m99k7mqmgrhudo0k8_8c6m';
  var gFpc = 'WT_FPC';
  if (document.cookie.indexOf(gFpc + "=") == -1) {
    var wtidJs = document.createElement("script");
    wtidJs.src = "//" + gDomain + "/" + gDcsId + "/wtid.js";
    document.getElementsByTagName("head")[0].appendChild(wtidJs);
  }
  var detectedLocale = 'zh-cn';
  var wtsp = '_msdn_';
  var gTrackEvents = '0';
/*]]>*/
</SCRIPT>
 <NOSCRIPT>&lt;div&gt;&lt;img alt="DCSIMG" id="Img1" width="1" height="1" 
src="http://m.webtrends.com/dcsmgru7m99k7mqmgrhudo0k8_8c6m/njs.gif?dcsuri=/nojavascript&amp;amp;WT.js=No" 
/&gt;&lt;/div&gt;</NOSCRIPT> 
<SCRIPT type="text/javascript">
  var omni_guid = '40132e25-b485-4c36-af26-cb5c3f662a34'; 
</SCRIPT>
 <NOSCRIPT>    &lt;a href="http://www.omniture.com" title="Web Analytics"&gt;    
    &lt;img src="//msstonojsmsdn.112.2o7.net/b/ss/msstonojsmsdn/1/H.20.2--NS/0" 
height="1" width="1" border="0" alt="" /&gt;&lt;/a&gt; </NOSCRIPT>         
</DIV>
<SCRIPT src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/jquery-1.7.1.min.js" type="text/javascript" xmlns="http://www.w3.org/1999/xhtml" xml:space="preserve"></SCRIPT>

<SCRIPT src="教程：使用%20C++%20创建你的第一个%20Metro%20风格应用_files/Combined.js" type="text/javascript" xmlns="http://www.w3.org/1999/xhtml"></SCRIPT>
 </BODY></HTML>
